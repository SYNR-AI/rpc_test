// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package biz_es_model_item

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SearchItem) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchItem[number], err)
}

func (x *SearchItem) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchItem) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MuserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchItem) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.MuserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchItem) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchItem) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SearchItem) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *SearchItem) fastWriteField2(buf []byte) (offset int) {
	if x.MuserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetMuserId())
	return offset
}

func (x *SearchItem) fastWriteField3(buf []byte) (offset int) {
	if x.MuserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMuserName())
	return offset
}

func (x *SearchItem) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *SearchItem) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SearchItem) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *SearchItem) sizeField2() (n int) {
	if x.MuserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetMuserId())
	return n
}

func (x *SearchItem) sizeField3() (n int) {
	if x.MuserName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMuserName())
	return n
}

func (x *SearchItem) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

var fieldIDToName_SearchItem = map[int32]string{
	1: "ItemId",
	2: "MuserId",
	3: "MuserName",
	4: "Description",
}
