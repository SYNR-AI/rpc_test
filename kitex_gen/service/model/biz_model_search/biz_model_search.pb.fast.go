// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package biz_model_search

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *ItemIndex) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ItemIndex[number], err)
}

func (x *ItemIndex) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ItemIndex) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ItemIndex) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ItemIndex) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Hashtag = append(x.Hashtag, v)
	return offset, err
}

func (x *ItemIndex) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ItemIndexUg) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ItemIndexUg[number], err)
}

func (x *ItemIndexUg) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ItemIndexUg) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ItemIndexUg) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Content = append(x.Content, v)
	return offset, err
}

func (x *ItemIndexUg) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Hashtag = append(x.Hashtag, v)
	return offset, err
}

func (x *ItemIndexUg) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ItemIndexUg) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.MuserName = append(x.MuserName, v)
	return offset, err
}

func (x *ItemIndexUg) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.ChatCount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CharacterItemIndex) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CharacterItemIndex[number], err)
}

func (x *CharacterItemIndex) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CharacterItemIndex) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MuserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CharacterItemIndex) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CreatorId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CharacterItemIndex) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CollectionId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CharacterItemIndex) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CharacterId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ItemIndex) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *ItemIndex) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *ItemIndex) fastWriteField2(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *ItemIndex) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *ItemIndex) fastWriteField4(buf []byte) (offset int) {
	if len(x.Hashtag) == 0 {
		return offset
	}
	for i := range x.GetHashtag() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetHashtag()[i])
	}
	return offset
}

func (x *ItemIndex) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *ItemIndexUg) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *ItemIndexUg) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *ItemIndexUg) fastWriteField2(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *ItemIndexUg) fastWriteField3(buf []byte) (offset int) {
	if len(x.Content) == 0 {
		return offset
	}
	for i := range x.GetContent() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetContent()[i])
	}
	return offset
}

func (x *ItemIndexUg) fastWriteField4(buf []byte) (offset int) {
	if len(x.Hashtag) == 0 {
		return offset
	}
	for i := range x.GetHashtag() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetHashtag()[i])
	}
	return offset
}

func (x *ItemIndexUg) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *ItemIndexUg) fastWriteField6(buf []byte) (offset int) {
	if len(x.MuserName) == 0 {
		return offset
	}
	for i := range x.GetMuserName() {
		offset += fastpb.WriteString(buf[offset:], 6, x.GetMuserName()[i])
	}
	return offset
}

func (x *ItemIndexUg) fastWriteField7(buf []byte) (offset int) {
	if x.ChatCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, x.GetChatCount())
	return offset
}

func (x *CharacterItemIndex) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *CharacterItemIndex) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *CharacterItemIndex) fastWriteField2(buf []byte) (offset int) {
	if x.MuserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetMuserId())
	return offset
}

func (x *CharacterItemIndex) fastWriteField3(buf []byte) (offset int) {
	if x.CreatorId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetCreatorId())
	return offset
}

func (x *CharacterItemIndex) fastWriteField4(buf []byte) (offset int) {
	if x.CollectionId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetCollectionId())
	return offset
}

func (x *CharacterItemIndex) fastWriteField5(buf []byte) (offset int) {
	if x.CharacterId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCharacterId())
	return offset
}

func (x *ItemIndex) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *ItemIndex) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *ItemIndex) sizeField2() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *ItemIndex) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *ItemIndex) sizeField4() (n int) {
	if len(x.Hashtag) == 0 {
		return n
	}
	for i := range x.GetHashtag() {
		n += fastpb.SizeString(4, x.GetHashtag()[i])
	}
	return n
}

func (x *ItemIndex) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

func (x *ItemIndexUg) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *ItemIndexUg) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *ItemIndexUg) sizeField2() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *ItemIndexUg) sizeField3() (n int) {
	if len(x.Content) == 0 {
		return n
	}
	for i := range x.GetContent() {
		n += fastpb.SizeString(3, x.GetContent()[i])
	}
	return n
}

func (x *ItemIndexUg) sizeField4() (n int) {
	if len(x.Hashtag) == 0 {
		return n
	}
	for i := range x.GetHashtag() {
		n += fastpb.SizeString(4, x.GetHashtag()[i])
	}
	return n
}

func (x *ItemIndexUg) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

func (x *ItemIndexUg) sizeField6() (n int) {
	if len(x.MuserName) == 0 {
		return n
	}
	for i := range x.GetMuserName() {
		n += fastpb.SizeString(6, x.GetMuserName()[i])
	}
	return n
}

func (x *ItemIndexUg) sizeField7() (n int) {
	if x.ChatCount == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, x.GetChatCount())
	return n
}

func (x *CharacterItemIndex) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *CharacterItemIndex) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *CharacterItemIndex) sizeField2() (n int) {
	if x.MuserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetMuserId())
	return n
}

func (x *CharacterItemIndex) sizeField3() (n int) {
	if x.CreatorId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetCreatorId())
	return n
}

func (x *CharacterItemIndex) sizeField4() (n int) {
	if x.CollectionId == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetCollectionId())
	return n
}

func (x *CharacterItemIndex) sizeField5() (n int) {
	if x.CharacterId == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCharacterId())
	return n
}

var fieldIDToName_ItemIndex = map[int32]string{
	1: "ItemId",
	2: "Title",
	3: "Description",
	4: "Hashtag",
	5: "CreateTime",
}

var fieldIDToName_ItemIndexUg = map[int32]string{
	1: "ItemId",
	2: "Title",
	3: "Content",
	4: "Hashtag",
	5: "CreateTime",
	6: "MuserName",
	7: "ChatCount",
}

var fieldIDToName_CharacterItemIndex = map[int32]string{
	1: "ItemId",
	2: "MuserId",
	3: "CreatorId",
	4: "CollectionId",
	5: "CharacterId",
}
