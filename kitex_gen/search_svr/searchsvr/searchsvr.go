// Code generated by Kitex v0.7.3. DO NOT EDIT.

package searchsvr

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	search_svr "rpc_test/kitex_gen/search_svr"
)

func serviceInfo() *kitex.ServiceInfo {
	return searchSvrServiceInfo
}

var searchSvrServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SearchSvr"
	handlerType := (*search_svr.SearchSvr)(nil)
	methods := map[string]kitex.MethodInfo{
		"SearchHashtagItem":            kitex.NewMethodInfo(searchHashtagItemHandler, newSearchHashtagItemArgs, newSearchHashtagItemResult, false),
		"SearchItem":                   kitex.NewMethodInfo(searchItemHandler, newSearchItemArgs, newSearchItemResult, false),
		"IndexItem":                    kitex.NewMethodInfo(indexItemHandler, newIndexItemArgs, newIndexItemResult, false),
		"DelIndexItem":                 kitex.NewMethodInfo(delIndexItemHandler, newDelIndexItemArgs, newDelIndexItemResult, false),
		"IndexAllItem4Ug":              kitex.NewMethodInfo(indexAllItem4UgHandler, newIndexAllItem4UgArgs, newIndexAllItem4UgResult, false),
		"SearchItem4Ug":                kitex.NewMethodInfo(searchItem4UgHandler, newSearchItem4UgArgs, newSearchItem4UgResult, false),
		"SearchHashtagItem4Ug":         kitex.NewMethodInfo(searchHashtagItem4UgHandler, newSearchHashtagItem4UgArgs, newSearchHashtagItem4UgResult, false),
		"IndexItem4Ug":                 kitex.NewMethodInfo(indexItem4UgHandler, newIndexItem4UgArgs, newIndexItem4UgResult, false),
		"DelIndexItem4Ug":              kitex.NewMethodInfo(delIndexItem4UgHandler, newDelIndexItem4UgArgs, newDelIndexItem4UgResult, false),
		"SearchCharacterItem":          kitex.NewMethodInfo(searchCharacterItemHandler, newSearchCharacterItemArgs, newSearchCharacterItemResult, false),
		"IndexCharacterItem":           kitex.NewMethodInfo(indexCharacterItemHandler, newIndexCharacterItemArgs, newIndexCharacterItemResult, false),
		"DeleteCharacterItem":          kitex.NewMethodInfo(deleteCharacterItemHandler, newDeleteCharacterItemArgs, newDeleteCharacterItemResult, false),
		"SearchCharacterItemHint":      kitex.NewMethodInfo(searchCharacterItemHintHandler, newSearchCharacterItemHintArgs, newSearchCharacterItemHintResult, false),
		"ESSyncItem":                   kitex.NewMethodInfo(eSSyncItemHandler, newESSyncItemArgs, newESSyncItemResult, false),
		"ESBulkSyncItem":               kitex.NewMethodInfo(eSBulkSyncItemHandler, newESBulkSyncItemArgs, newESBulkSyncItemResult, false),
		"ESDeleteItem":                 kitex.NewMethodInfo(eSDeleteItemHandler, newESDeleteItemArgs, newESDeleteItemResult, false),
		"ESQueryItem":                  kitex.NewMethodInfo(eSQueryItemHandler, newESQueryItemArgs, newESQueryItemResult, false),
		"ESMGetItem":                   kitex.NewMethodInfo(eSMGetItemHandler, newESMGetItemArgs, newESMGetItemResult, false),
		"BulkCreateHashtagItem":        kitex.NewMethodInfo(bulkCreateHashtagItemHandler, newBulkCreateHashtagItemArgs, newBulkCreateHashtagItemResult, false),
		"UpdateHashtagItemSexualScore": kitex.NewMethodInfo(updateHashtagItemSexualScoreHandler, newUpdateHashtagItemSexualScoreArgs, newUpdateHashtagItemSexualScoreResult, false),
		"SyncUser":                     kitex.NewMethodInfo(syncUserHandler, newSyncUserArgs, newSyncUserResult, false),
		"DeleteUser":                   kitex.NewMethodInfo(deleteUserHandler, newDeleteUserArgs, newDeleteUserResult, false),
		"SearchUser":                   kitex.NewMethodInfo(searchUserHandler, newSearchUserArgs, newSearchUserResult, false),
		"GetESDocById":                 kitex.NewMethodInfo(getESDocByIdHandler, newGetESDocByIdArgs, newGetESDocByIdResult, false),
		"SyncMuser":                    kitex.NewMethodInfo(syncMuserHandler, newSyncMuserArgs, newSyncMuserResult, false),
		"DeleteMuser":                  kitex.NewMethodInfo(deleteMuserHandler, newDeleteMuserArgs, newDeleteMuserResult, false),
		"SearchMuser":                  kitex.NewMethodInfo(searchMuserHandler, newSearchMuserArgs, newSearchMuserResult, false),
		"GetMuser":                     kitex.NewMethodInfo(getMuserHandler, newGetMuserArgs, newGetMuserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "search_svr",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func searchHashtagItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.SearchHashtagItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).SearchHashtagItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchHashtagItemArgs:
		success, err := handler.(search_svr.SearchSvr).SearchHashtagItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchHashtagItemResult)
		realResult.Success = success
	}
	return nil
}
func newSearchHashtagItemArgs() interface{} {
	return &SearchHashtagItemArgs{}
}

func newSearchHashtagItemResult() interface{} {
	return &SearchHashtagItemResult{}
}

type SearchHashtagItemArgs struct {
	Req *search_svr.SearchHashtagItemReq
}

func (p *SearchHashtagItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.SearchHashtagItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchHashtagItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchHashtagItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchHashtagItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchHashtagItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchHashtagItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchHashtagItemArgs_Req_DEFAULT *search_svr.SearchHashtagItemReq

func (p *SearchHashtagItemArgs) GetReq() *search_svr.SearchHashtagItemReq {
	if !p.IsSetReq() {
		return SearchHashtagItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchHashtagItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchHashtagItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchHashtagItemResult struct {
	Success *search_svr.SearchHashtagItemResp
}

var SearchHashtagItemResult_Success_DEFAULT *search_svr.SearchHashtagItemResp

func (p *SearchHashtagItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.SearchHashtagItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchHashtagItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchHashtagItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchHashtagItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchHashtagItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchHashtagItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchHashtagItemResult) GetSuccess() *search_svr.SearchHashtagItemResp {
	if !p.IsSetSuccess() {
		return SearchHashtagItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchHashtagItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.SearchHashtagItemResp)
}

func (p *SearchHashtagItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchHashtagItemResult) GetResult() interface{} {
	return p.Success
}

func searchItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.SearchItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).SearchItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchItemArgs:
		success, err := handler.(search_svr.SearchSvr).SearchItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchItemResult)
		realResult.Success = success
	}
	return nil
}
func newSearchItemArgs() interface{} {
	return &SearchItemArgs{}
}

func newSearchItemResult() interface{} {
	return &SearchItemResult{}
}

type SearchItemArgs struct {
	Req *search_svr.SearchItemReq
}

func (p *SearchItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.SearchItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchItemArgs_Req_DEFAULT *search_svr.SearchItemReq

func (p *SearchItemArgs) GetReq() *search_svr.SearchItemReq {
	if !p.IsSetReq() {
		return SearchItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchItemResult struct {
	Success *search_svr.SearchItemResp
}

var SearchItemResult_Success_DEFAULT *search_svr.SearchItemResp

func (p *SearchItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.SearchItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchItemResult) GetSuccess() *search_svr.SearchItemResp {
	if !p.IsSetSuccess() {
		return SearchItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.SearchItemResp)
}

func (p *SearchItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchItemResult) GetResult() interface{} {
	return p.Success
}

func indexItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.IndexItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).IndexItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IndexItemArgs:
		success, err := handler.(search_svr.SearchSvr).IndexItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IndexItemResult)
		realResult.Success = success
	}
	return nil
}
func newIndexItemArgs() interface{} {
	return &IndexItemArgs{}
}

func newIndexItemResult() interface{} {
	return &IndexItemResult{}
}

type IndexItemArgs struct {
	Req *search_svr.IndexItemReq
}

func (p *IndexItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.IndexItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IndexItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IndexItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IndexItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IndexItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.IndexItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IndexItemArgs_Req_DEFAULT *search_svr.IndexItemReq

func (p *IndexItemArgs) GetReq() *search_svr.IndexItemReq {
	if !p.IsSetReq() {
		return IndexItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IndexItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IndexItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IndexItemResult struct {
	Success *search_svr.IndexItemResp
}

var IndexItemResult_Success_DEFAULT *search_svr.IndexItemResp

func (p *IndexItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.IndexItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IndexItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IndexItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IndexItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IndexItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.IndexItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IndexItemResult) GetSuccess() *search_svr.IndexItemResp {
	if !p.IsSetSuccess() {
		return IndexItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IndexItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.IndexItemResp)
}

func (p *IndexItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IndexItemResult) GetResult() interface{} {
	return p.Success
}

func delIndexItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.DelIndexItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).DelIndexItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DelIndexItemArgs:
		success, err := handler.(search_svr.SearchSvr).DelIndexItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DelIndexItemResult)
		realResult.Success = success
	}
	return nil
}
func newDelIndexItemArgs() interface{} {
	return &DelIndexItemArgs{}
}

func newDelIndexItemResult() interface{} {
	return &DelIndexItemResult{}
}

type DelIndexItemArgs struct {
	Req *search_svr.DelIndexItemReq
}

func (p *DelIndexItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.DelIndexItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DelIndexItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DelIndexItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DelIndexItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DelIndexItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.DelIndexItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DelIndexItemArgs_Req_DEFAULT *search_svr.DelIndexItemReq

func (p *DelIndexItemArgs) GetReq() *search_svr.DelIndexItemReq {
	if !p.IsSetReq() {
		return DelIndexItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DelIndexItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DelIndexItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DelIndexItemResult struct {
	Success *search_svr.DelIndexItemResp
}

var DelIndexItemResult_Success_DEFAULT *search_svr.DelIndexItemResp

func (p *DelIndexItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.DelIndexItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DelIndexItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DelIndexItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DelIndexItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DelIndexItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.DelIndexItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DelIndexItemResult) GetSuccess() *search_svr.DelIndexItemResp {
	if !p.IsSetSuccess() {
		return DelIndexItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DelIndexItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.DelIndexItemResp)
}

func (p *DelIndexItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DelIndexItemResult) GetResult() interface{} {
	return p.Success
}

func indexAllItem4UgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.IndexAllItem4UgReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).IndexAllItem4Ug(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IndexAllItem4UgArgs:
		success, err := handler.(search_svr.SearchSvr).IndexAllItem4Ug(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IndexAllItem4UgResult)
		realResult.Success = success
	}
	return nil
}
func newIndexAllItem4UgArgs() interface{} {
	return &IndexAllItem4UgArgs{}
}

func newIndexAllItem4UgResult() interface{} {
	return &IndexAllItem4UgResult{}
}

type IndexAllItem4UgArgs struct {
	Req *search_svr.IndexAllItem4UgReq
}

func (p *IndexAllItem4UgArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.IndexAllItem4UgReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IndexAllItem4UgArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IndexAllItem4UgArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IndexAllItem4UgArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IndexAllItem4UgArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.IndexAllItem4UgReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IndexAllItem4UgArgs_Req_DEFAULT *search_svr.IndexAllItem4UgReq

func (p *IndexAllItem4UgArgs) GetReq() *search_svr.IndexAllItem4UgReq {
	if !p.IsSetReq() {
		return IndexAllItem4UgArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IndexAllItem4UgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IndexAllItem4UgArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IndexAllItem4UgResult struct {
	Success *search_svr.IndexAllItem4UgResp
}

var IndexAllItem4UgResult_Success_DEFAULT *search_svr.IndexAllItem4UgResp

func (p *IndexAllItem4UgResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.IndexAllItem4UgResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IndexAllItem4UgResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IndexAllItem4UgResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IndexAllItem4UgResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IndexAllItem4UgResult) Unmarshal(in []byte) error {
	msg := new(search_svr.IndexAllItem4UgResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IndexAllItem4UgResult) GetSuccess() *search_svr.IndexAllItem4UgResp {
	if !p.IsSetSuccess() {
		return IndexAllItem4UgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IndexAllItem4UgResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.IndexAllItem4UgResp)
}

func (p *IndexAllItem4UgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IndexAllItem4UgResult) GetResult() interface{} {
	return p.Success
}

func searchItem4UgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.SearchItem4UgReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).SearchItem4Ug(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchItem4UgArgs:
		success, err := handler.(search_svr.SearchSvr).SearchItem4Ug(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchItem4UgResult)
		realResult.Success = success
	}
	return nil
}
func newSearchItem4UgArgs() interface{} {
	return &SearchItem4UgArgs{}
}

func newSearchItem4UgResult() interface{} {
	return &SearchItem4UgResult{}
}

type SearchItem4UgArgs struct {
	Req *search_svr.SearchItem4UgReq
}

func (p *SearchItem4UgArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.SearchItem4UgReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchItem4UgArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchItem4UgArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchItem4UgArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchItem4UgArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchItem4UgReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchItem4UgArgs_Req_DEFAULT *search_svr.SearchItem4UgReq

func (p *SearchItem4UgArgs) GetReq() *search_svr.SearchItem4UgReq {
	if !p.IsSetReq() {
		return SearchItem4UgArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchItem4UgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchItem4UgArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchItem4UgResult struct {
	Success *search_svr.SearchItem4UgResp
}

var SearchItem4UgResult_Success_DEFAULT *search_svr.SearchItem4UgResp

func (p *SearchItem4UgResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.SearchItem4UgResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchItem4UgResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchItem4UgResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchItem4UgResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchItem4UgResult) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchItem4UgResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchItem4UgResult) GetSuccess() *search_svr.SearchItem4UgResp {
	if !p.IsSetSuccess() {
		return SearchItem4UgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchItem4UgResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.SearchItem4UgResp)
}

func (p *SearchItem4UgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchItem4UgResult) GetResult() interface{} {
	return p.Success
}

func searchHashtagItem4UgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.SearchHashtagItem4UgReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).SearchHashtagItem4Ug(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchHashtagItem4UgArgs:
		success, err := handler.(search_svr.SearchSvr).SearchHashtagItem4Ug(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchHashtagItem4UgResult)
		realResult.Success = success
	}
	return nil
}
func newSearchHashtagItem4UgArgs() interface{} {
	return &SearchHashtagItem4UgArgs{}
}

func newSearchHashtagItem4UgResult() interface{} {
	return &SearchHashtagItem4UgResult{}
}

type SearchHashtagItem4UgArgs struct {
	Req *search_svr.SearchHashtagItem4UgReq
}

func (p *SearchHashtagItem4UgArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.SearchHashtagItem4UgReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchHashtagItem4UgArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchHashtagItem4UgArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchHashtagItem4UgArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchHashtagItem4UgArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchHashtagItem4UgReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchHashtagItem4UgArgs_Req_DEFAULT *search_svr.SearchHashtagItem4UgReq

func (p *SearchHashtagItem4UgArgs) GetReq() *search_svr.SearchHashtagItem4UgReq {
	if !p.IsSetReq() {
		return SearchHashtagItem4UgArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchHashtagItem4UgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchHashtagItem4UgArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchHashtagItem4UgResult struct {
	Success *search_svr.SearchHashtagItem4UgResp
}

var SearchHashtagItem4UgResult_Success_DEFAULT *search_svr.SearchHashtagItem4UgResp

func (p *SearchHashtagItem4UgResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.SearchHashtagItem4UgResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchHashtagItem4UgResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchHashtagItem4UgResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchHashtagItem4UgResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchHashtagItem4UgResult) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchHashtagItem4UgResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchHashtagItem4UgResult) GetSuccess() *search_svr.SearchHashtagItem4UgResp {
	if !p.IsSetSuccess() {
		return SearchHashtagItem4UgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchHashtagItem4UgResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.SearchHashtagItem4UgResp)
}

func (p *SearchHashtagItem4UgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchHashtagItem4UgResult) GetResult() interface{} {
	return p.Success
}

func indexItem4UgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.IndexItem4UgReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).IndexItem4Ug(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IndexItem4UgArgs:
		success, err := handler.(search_svr.SearchSvr).IndexItem4Ug(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IndexItem4UgResult)
		realResult.Success = success
	}
	return nil
}
func newIndexItem4UgArgs() interface{} {
	return &IndexItem4UgArgs{}
}

func newIndexItem4UgResult() interface{} {
	return &IndexItem4UgResult{}
}

type IndexItem4UgArgs struct {
	Req *search_svr.IndexItem4UgReq
}

func (p *IndexItem4UgArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.IndexItem4UgReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IndexItem4UgArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IndexItem4UgArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IndexItem4UgArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IndexItem4UgArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.IndexItem4UgReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IndexItem4UgArgs_Req_DEFAULT *search_svr.IndexItem4UgReq

func (p *IndexItem4UgArgs) GetReq() *search_svr.IndexItem4UgReq {
	if !p.IsSetReq() {
		return IndexItem4UgArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IndexItem4UgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IndexItem4UgArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IndexItem4UgResult struct {
	Success *search_svr.IndexItem4UgResp
}

var IndexItem4UgResult_Success_DEFAULT *search_svr.IndexItem4UgResp

func (p *IndexItem4UgResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.IndexItem4UgResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IndexItem4UgResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IndexItem4UgResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IndexItem4UgResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IndexItem4UgResult) Unmarshal(in []byte) error {
	msg := new(search_svr.IndexItem4UgResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IndexItem4UgResult) GetSuccess() *search_svr.IndexItem4UgResp {
	if !p.IsSetSuccess() {
		return IndexItem4UgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IndexItem4UgResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.IndexItem4UgResp)
}

func (p *IndexItem4UgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IndexItem4UgResult) GetResult() interface{} {
	return p.Success
}

func delIndexItem4UgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.DelIndexItem4UgReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).DelIndexItem4Ug(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DelIndexItem4UgArgs:
		success, err := handler.(search_svr.SearchSvr).DelIndexItem4Ug(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DelIndexItem4UgResult)
		realResult.Success = success
	}
	return nil
}
func newDelIndexItem4UgArgs() interface{} {
	return &DelIndexItem4UgArgs{}
}

func newDelIndexItem4UgResult() interface{} {
	return &DelIndexItem4UgResult{}
}

type DelIndexItem4UgArgs struct {
	Req *search_svr.DelIndexItem4UgReq
}

func (p *DelIndexItem4UgArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.DelIndexItem4UgReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DelIndexItem4UgArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DelIndexItem4UgArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DelIndexItem4UgArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DelIndexItem4UgArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.DelIndexItem4UgReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DelIndexItem4UgArgs_Req_DEFAULT *search_svr.DelIndexItem4UgReq

func (p *DelIndexItem4UgArgs) GetReq() *search_svr.DelIndexItem4UgReq {
	if !p.IsSetReq() {
		return DelIndexItem4UgArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DelIndexItem4UgArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DelIndexItem4UgArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DelIndexItem4UgResult struct {
	Success *search_svr.DelIndexItem4UgResp
}

var DelIndexItem4UgResult_Success_DEFAULT *search_svr.DelIndexItem4UgResp

func (p *DelIndexItem4UgResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.DelIndexItem4UgResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DelIndexItem4UgResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DelIndexItem4UgResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DelIndexItem4UgResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DelIndexItem4UgResult) Unmarshal(in []byte) error {
	msg := new(search_svr.DelIndexItem4UgResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DelIndexItem4UgResult) GetSuccess() *search_svr.DelIndexItem4UgResp {
	if !p.IsSetSuccess() {
		return DelIndexItem4UgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DelIndexItem4UgResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.DelIndexItem4UgResp)
}

func (p *DelIndexItem4UgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DelIndexItem4UgResult) GetResult() interface{} {
	return p.Success
}

func searchCharacterItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.SearchCharacterItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).SearchCharacterItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchCharacterItemArgs:
		success, err := handler.(search_svr.SearchSvr).SearchCharacterItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchCharacterItemResult)
		realResult.Success = success
	}
	return nil
}
func newSearchCharacterItemArgs() interface{} {
	return &SearchCharacterItemArgs{}
}

func newSearchCharacterItemResult() interface{} {
	return &SearchCharacterItemResult{}
}

type SearchCharacterItemArgs struct {
	Req *search_svr.SearchCharacterItemReq
}

func (p *SearchCharacterItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.SearchCharacterItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchCharacterItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchCharacterItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchCharacterItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchCharacterItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchCharacterItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchCharacterItemArgs_Req_DEFAULT *search_svr.SearchCharacterItemReq

func (p *SearchCharacterItemArgs) GetReq() *search_svr.SearchCharacterItemReq {
	if !p.IsSetReq() {
		return SearchCharacterItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchCharacterItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchCharacterItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchCharacterItemResult struct {
	Success *search_svr.SearchCharacterItemResp
}

var SearchCharacterItemResult_Success_DEFAULT *search_svr.SearchCharacterItemResp

func (p *SearchCharacterItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.SearchCharacterItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchCharacterItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchCharacterItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchCharacterItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchCharacterItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchCharacterItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchCharacterItemResult) GetSuccess() *search_svr.SearchCharacterItemResp {
	if !p.IsSetSuccess() {
		return SearchCharacterItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchCharacterItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.SearchCharacterItemResp)
}

func (p *SearchCharacterItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchCharacterItemResult) GetResult() interface{} {
	return p.Success
}

func indexCharacterItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.IndexCharacterItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).IndexCharacterItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IndexCharacterItemArgs:
		success, err := handler.(search_svr.SearchSvr).IndexCharacterItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IndexCharacterItemResult)
		realResult.Success = success
	}
	return nil
}
func newIndexCharacterItemArgs() interface{} {
	return &IndexCharacterItemArgs{}
}

func newIndexCharacterItemResult() interface{} {
	return &IndexCharacterItemResult{}
}

type IndexCharacterItemArgs struct {
	Req *search_svr.IndexCharacterItemReq
}

func (p *IndexCharacterItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.IndexCharacterItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IndexCharacterItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IndexCharacterItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IndexCharacterItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IndexCharacterItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.IndexCharacterItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IndexCharacterItemArgs_Req_DEFAULT *search_svr.IndexCharacterItemReq

func (p *IndexCharacterItemArgs) GetReq() *search_svr.IndexCharacterItemReq {
	if !p.IsSetReq() {
		return IndexCharacterItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IndexCharacterItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IndexCharacterItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IndexCharacterItemResult struct {
	Success *search_svr.IndexCharacterItemResp
}

var IndexCharacterItemResult_Success_DEFAULT *search_svr.IndexCharacterItemResp

func (p *IndexCharacterItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.IndexCharacterItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IndexCharacterItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IndexCharacterItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IndexCharacterItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IndexCharacterItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.IndexCharacterItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IndexCharacterItemResult) GetSuccess() *search_svr.IndexCharacterItemResp {
	if !p.IsSetSuccess() {
		return IndexCharacterItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IndexCharacterItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.IndexCharacterItemResp)
}

func (p *IndexCharacterItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IndexCharacterItemResult) GetResult() interface{} {
	return p.Success
}

func deleteCharacterItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.DeleteCharacterItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).DeleteCharacterItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCharacterItemArgs:
		success, err := handler.(search_svr.SearchSvr).DeleteCharacterItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCharacterItemResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCharacterItemArgs() interface{} {
	return &DeleteCharacterItemArgs{}
}

func newDeleteCharacterItemResult() interface{} {
	return &DeleteCharacterItemResult{}
}

type DeleteCharacterItemArgs struct {
	Req *search_svr.DeleteCharacterItemReq
}

func (p *DeleteCharacterItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.DeleteCharacterItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCharacterItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCharacterItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCharacterItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCharacterItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.DeleteCharacterItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCharacterItemArgs_Req_DEFAULT *search_svr.DeleteCharacterItemReq

func (p *DeleteCharacterItemArgs) GetReq() *search_svr.DeleteCharacterItemReq {
	if !p.IsSetReq() {
		return DeleteCharacterItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCharacterItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCharacterItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCharacterItemResult struct {
	Success *search_svr.DeleteCharacterItemResp
}

var DeleteCharacterItemResult_Success_DEFAULT *search_svr.DeleteCharacterItemResp

func (p *DeleteCharacterItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.DeleteCharacterItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCharacterItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCharacterItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCharacterItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCharacterItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.DeleteCharacterItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCharacterItemResult) GetSuccess() *search_svr.DeleteCharacterItemResp {
	if !p.IsSetSuccess() {
		return DeleteCharacterItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCharacterItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.DeleteCharacterItemResp)
}

func (p *DeleteCharacterItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCharacterItemResult) GetResult() interface{} {
	return p.Success
}

func searchCharacterItemHintHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.SearchCharacterItemHintReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).SearchCharacterItemHint(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchCharacterItemHintArgs:
		success, err := handler.(search_svr.SearchSvr).SearchCharacterItemHint(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchCharacterItemHintResult)
		realResult.Success = success
	}
	return nil
}
func newSearchCharacterItemHintArgs() interface{} {
	return &SearchCharacterItemHintArgs{}
}

func newSearchCharacterItemHintResult() interface{} {
	return &SearchCharacterItemHintResult{}
}

type SearchCharacterItemHintArgs struct {
	Req *search_svr.SearchCharacterItemHintReq
}

func (p *SearchCharacterItemHintArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.SearchCharacterItemHintReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchCharacterItemHintArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchCharacterItemHintArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchCharacterItemHintArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchCharacterItemHintArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchCharacterItemHintReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchCharacterItemHintArgs_Req_DEFAULT *search_svr.SearchCharacterItemHintReq

func (p *SearchCharacterItemHintArgs) GetReq() *search_svr.SearchCharacterItemHintReq {
	if !p.IsSetReq() {
		return SearchCharacterItemHintArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchCharacterItemHintArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchCharacterItemHintArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchCharacterItemHintResult struct {
	Success *search_svr.SearchCharacterItemHintResp
}

var SearchCharacterItemHintResult_Success_DEFAULT *search_svr.SearchCharacterItemHintResp

func (p *SearchCharacterItemHintResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.SearchCharacterItemHintResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchCharacterItemHintResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchCharacterItemHintResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchCharacterItemHintResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchCharacterItemHintResult) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchCharacterItemHintResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchCharacterItemHintResult) GetSuccess() *search_svr.SearchCharacterItemHintResp {
	if !p.IsSetSuccess() {
		return SearchCharacterItemHintResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchCharacterItemHintResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.SearchCharacterItemHintResp)
}

func (p *SearchCharacterItemHintResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchCharacterItemHintResult) GetResult() interface{} {
	return p.Success
}

func eSSyncItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.ESSyncItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).ESSyncItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ESSyncItemArgs:
		success, err := handler.(search_svr.SearchSvr).ESSyncItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ESSyncItemResult)
		realResult.Success = success
	}
	return nil
}
func newESSyncItemArgs() interface{} {
	return &ESSyncItemArgs{}
}

func newESSyncItemResult() interface{} {
	return &ESSyncItemResult{}
}

type ESSyncItemArgs struct {
	Req *search_svr.ESSyncItemReq
}

func (p *ESSyncItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.ESSyncItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ESSyncItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ESSyncItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ESSyncItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ESSyncItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.ESSyncItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ESSyncItemArgs_Req_DEFAULT *search_svr.ESSyncItemReq

func (p *ESSyncItemArgs) GetReq() *search_svr.ESSyncItemReq {
	if !p.IsSetReq() {
		return ESSyncItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ESSyncItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ESSyncItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ESSyncItemResult struct {
	Success *search_svr.ESSyncItemResp
}

var ESSyncItemResult_Success_DEFAULT *search_svr.ESSyncItemResp

func (p *ESSyncItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.ESSyncItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ESSyncItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ESSyncItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ESSyncItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ESSyncItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.ESSyncItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ESSyncItemResult) GetSuccess() *search_svr.ESSyncItemResp {
	if !p.IsSetSuccess() {
		return ESSyncItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ESSyncItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.ESSyncItemResp)
}

func (p *ESSyncItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ESSyncItemResult) GetResult() interface{} {
	return p.Success
}

func eSBulkSyncItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.ESBulkSyncItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).ESBulkSyncItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ESBulkSyncItemArgs:
		success, err := handler.(search_svr.SearchSvr).ESBulkSyncItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ESBulkSyncItemResult)
		realResult.Success = success
	}
	return nil
}
func newESBulkSyncItemArgs() interface{} {
	return &ESBulkSyncItemArgs{}
}

func newESBulkSyncItemResult() interface{} {
	return &ESBulkSyncItemResult{}
}

type ESBulkSyncItemArgs struct {
	Req *search_svr.ESBulkSyncItemReq
}

func (p *ESBulkSyncItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.ESBulkSyncItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ESBulkSyncItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ESBulkSyncItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ESBulkSyncItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ESBulkSyncItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.ESBulkSyncItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ESBulkSyncItemArgs_Req_DEFAULT *search_svr.ESBulkSyncItemReq

func (p *ESBulkSyncItemArgs) GetReq() *search_svr.ESBulkSyncItemReq {
	if !p.IsSetReq() {
		return ESBulkSyncItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ESBulkSyncItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ESBulkSyncItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ESBulkSyncItemResult struct {
	Success *search_svr.ESBulkSyncItemResp
}

var ESBulkSyncItemResult_Success_DEFAULT *search_svr.ESBulkSyncItemResp

func (p *ESBulkSyncItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.ESBulkSyncItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ESBulkSyncItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ESBulkSyncItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ESBulkSyncItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ESBulkSyncItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.ESBulkSyncItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ESBulkSyncItemResult) GetSuccess() *search_svr.ESBulkSyncItemResp {
	if !p.IsSetSuccess() {
		return ESBulkSyncItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ESBulkSyncItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.ESBulkSyncItemResp)
}

func (p *ESBulkSyncItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ESBulkSyncItemResult) GetResult() interface{} {
	return p.Success
}

func eSDeleteItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.ESDeleteItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).ESDeleteItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ESDeleteItemArgs:
		success, err := handler.(search_svr.SearchSvr).ESDeleteItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ESDeleteItemResult)
		realResult.Success = success
	}
	return nil
}
func newESDeleteItemArgs() interface{} {
	return &ESDeleteItemArgs{}
}

func newESDeleteItemResult() interface{} {
	return &ESDeleteItemResult{}
}

type ESDeleteItemArgs struct {
	Req *search_svr.ESDeleteItemReq
}

func (p *ESDeleteItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.ESDeleteItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ESDeleteItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ESDeleteItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ESDeleteItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ESDeleteItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.ESDeleteItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ESDeleteItemArgs_Req_DEFAULT *search_svr.ESDeleteItemReq

func (p *ESDeleteItemArgs) GetReq() *search_svr.ESDeleteItemReq {
	if !p.IsSetReq() {
		return ESDeleteItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ESDeleteItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ESDeleteItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ESDeleteItemResult struct {
	Success *search_svr.ESDeleteItemResp
}

var ESDeleteItemResult_Success_DEFAULT *search_svr.ESDeleteItemResp

func (p *ESDeleteItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.ESDeleteItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ESDeleteItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ESDeleteItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ESDeleteItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ESDeleteItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.ESDeleteItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ESDeleteItemResult) GetSuccess() *search_svr.ESDeleteItemResp {
	if !p.IsSetSuccess() {
		return ESDeleteItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ESDeleteItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.ESDeleteItemResp)
}

func (p *ESDeleteItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ESDeleteItemResult) GetResult() interface{} {
	return p.Success
}

func eSQueryItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.ESQueryItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).ESQueryItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ESQueryItemArgs:
		success, err := handler.(search_svr.SearchSvr).ESQueryItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ESQueryItemResult)
		realResult.Success = success
	}
	return nil
}
func newESQueryItemArgs() interface{} {
	return &ESQueryItemArgs{}
}

func newESQueryItemResult() interface{} {
	return &ESQueryItemResult{}
}

type ESQueryItemArgs struct {
	Req *search_svr.ESQueryItemReq
}

func (p *ESQueryItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.ESQueryItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ESQueryItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ESQueryItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ESQueryItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ESQueryItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.ESQueryItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ESQueryItemArgs_Req_DEFAULT *search_svr.ESQueryItemReq

func (p *ESQueryItemArgs) GetReq() *search_svr.ESQueryItemReq {
	if !p.IsSetReq() {
		return ESQueryItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ESQueryItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ESQueryItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ESQueryItemResult struct {
	Success *search_svr.ESQueryItemResp
}

var ESQueryItemResult_Success_DEFAULT *search_svr.ESQueryItemResp

func (p *ESQueryItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.ESQueryItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ESQueryItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ESQueryItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ESQueryItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ESQueryItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.ESQueryItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ESQueryItemResult) GetSuccess() *search_svr.ESQueryItemResp {
	if !p.IsSetSuccess() {
		return ESQueryItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ESQueryItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.ESQueryItemResp)
}

func (p *ESQueryItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ESQueryItemResult) GetResult() interface{} {
	return p.Success
}

func eSMGetItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.ESMGetItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).ESMGetItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ESMGetItemArgs:
		success, err := handler.(search_svr.SearchSvr).ESMGetItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ESMGetItemResult)
		realResult.Success = success
	}
	return nil
}
func newESMGetItemArgs() interface{} {
	return &ESMGetItemArgs{}
}

func newESMGetItemResult() interface{} {
	return &ESMGetItemResult{}
}

type ESMGetItemArgs struct {
	Req *search_svr.ESMGetItemReq
}

func (p *ESMGetItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.ESMGetItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ESMGetItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ESMGetItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ESMGetItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ESMGetItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.ESMGetItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ESMGetItemArgs_Req_DEFAULT *search_svr.ESMGetItemReq

func (p *ESMGetItemArgs) GetReq() *search_svr.ESMGetItemReq {
	if !p.IsSetReq() {
		return ESMGetItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ESMGetItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ESMGetItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ESMGetItemResult struct {
	Success *search_svr.ESMGetItemResp
}

var ESMGetItemResult_Success_DEFAULT *search_svr.ESMGetItemResp

func (p *ESMGetItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.ESMGetItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ESMGetItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ESMGetItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ESMGetItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ESMGetItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.ESMGetItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ESMGetItemResult) GetSuccess() *search_svr.ESMGetItemResp {
	if !p.IsSetSuccess() {
		return ESMGetItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ESMGetItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.ESMGetItemResp)
}

func (p *ESMGetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ESMGetItemResult) GetResult() interface{} {
	return p.Success
}

func bulkCreateHashtagItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.BulkCreateHashtagItemReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).BulkCreateHashtagItem(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *BulkCreateHashtagItemArgs:
		success, err := handler.(search_svr.SearchSvr).BulkCreateHashtagItem(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BulkCreateHashtagItemResult)
		realResult.Success = success
	}
	return nil
}
func newBulkCreateHashtagItemArgs() interface{} {
	return &BulkCreateHashtagItemArgs{}
}

func newBulkCreateHashtagItemResult() interface{} {
	return &BulkCreateHashtagItemResult{}
}

type BulkCreateHashtagItemArgs struct {
	Req *search_svr.BulkCreateHashtagItemReq
}

func (p *BulkCreateHashtagItemArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.BulkCreateHashtagItemReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BulkCreateHashtagItemArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BulkCreateHashtagItemArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BulkCreateHashtagItemArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BulkCreateHashtagItemArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.BulkCreateHashtagItemReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BulkCreateHashtagItemArgs_Req_DEFAULT *search_svr.BulkCreateHashtagItemReq

func (p *BulkCreateHashtagItemArgs) GetReq() *search_svr.BulkCreateHashtagItemReq {
	if !p.IsSetReq() {
		return BulkCreateHashtagItemArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BulkCreateHashtagItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BulkCreateHashtagItemArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BulkCreateHashtagItemResult struct {
	Success *search_svr.BulkCreateHashtagItemResp
}

var BulkCreateHashtagItemResult_Success_DEFAULT *search_svr.BulkCreateHashtagItemResp

func (p *BulkCreateHashtagItemResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.BulkCreateHashtagItemResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BulkCreateHashtagItemResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BulkCreateHashtagItemResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BulkCreateHashtagItemResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BulkCreateHashtagItemResult) Unmarshal(in []byte) error {
	msg := new(search_svr.BulkCreateHashtagItemResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BulkCreateHashtagItemResult) GetSuccess() *search_svr.BulkCreateHashtagItemResp {
	if !p.IsSetSuccess() {
		return BulkCreateHashtagItemResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BulkCreateHashtagItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.BulkCreateHashtagItemResp)
}

func (p *BulkCreateHashtagItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BulkCreateHashtagItemResult) GetResult() interface{} {
	return p.Success
}

func updateHashtagItemSexualScoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.UpdateHashtagItemSexualScoreReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).UpdateHashtagItemSexualScore(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateHashtagItemSexualScoreArgs:
		success, err := handler.(search_svr.SearchSvr).UpdateHashtagItemSexualScore(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateHashtagItemSexualScoreResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateHashtagItemSexualScoreArgs() interface{} {
	return &UpdateHashtagItemSexualScoreArgs{}
}

func newUpdateHashtagItemSexualScoreResult() interface{} {
	return &UpdateHashtagItemSexualScoreResult{}
}

type UpdateHashtagItemSexualScoreArgs struct {
	Req *search_svr.UpdateHashtagItemSexualScoreReq
}

func (p *UpdateHashtagItemSexualScoreArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.UpdateHashtagItemSexualScoreReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateHashtagItemSexualScoreArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateHashtagItemSexualScoreArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateHashtagItemSexualScoreArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateHashtagItemSexualScoreArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.UpdateHashtagItemSexualScoreReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateHashtagItemSexualScoreArgs_Req_DEFAULT *search_svr.UpdateHashtagItemSexualScoreReq

func (p *UpdateHashtagItemSexualScoreArgs) GetReq() *search_svr.UpdateHashtagItemSexualScoreReq {
	if !p.IsSetReq() {
		return UpdateHashtagItemSexualScoreArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateHashtagItemSexualScoreArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateHashtagItemSexualScoreArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateHashtagItemSexualScoreResult struct {
	Success *search_svr.UpdateHashtagItemSexualScoreResp
}

var UpdateHashtagItemSexualScoreResult_Success_DEFAULT *search_svr.UpdateHashtagItemSexualScoreResp

func (p *UpdateHashtagItemSexualScoreResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.UpdateHashtagItemSexualScoreResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateHashtagItemSexualScoreResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateHashtagItemSexualScoreResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateHashtagItemSexualScoreResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateHashtagItemSexualScoreResult) Unmarshal(in []byte) error {
	msg := new(search_svr.UpdateHashtagItemSexualScoreResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateHashtagItemSexualScoreResult) GetSuccess() *search_svr.UpdateHashtagItemSexualScoreResp {
	if !p.IsSetSuccess() {
		return UpdateHashtagItemSexualScoreResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateHashtagItemSexualScoreResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.UpdateHashtagItemSexualScoreResp)
}

func (p *UpdateHashtagItemSexualScoreResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateHashtagItemSexualScoreResult) GetResult() interface{} {
	return p.Success
}

func syncUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.SyncUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).SyncUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SyncUserArgs:
		success, err := handler.(search_svr.SearchSvr).SyncUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SyncUserResult)
		realResult.Success = success
	}
	return nil
}
func newSyncUserArgs() interface{} {
	return &SyncUserArgs{}
}

func newSyncUserResult() interface{} {
	return &SyncUserResult{}
}

type SyncUserArgs struct {
	Req *search_svr.SyncUserReq
}

func (p *SyncUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.SyncUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SyncUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SyncUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SyncUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SyncUserArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.SyncUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SyncUserArgs_Req_DEFAULT *search_svr.SyncUserReq

func (p *SyncUserArgs) GetReq() *search_svr.SyncUserReq {
	if !p.IsSetReq() {
		return SyncUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SyncUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SyncUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SyncUserResult struct {
	Success *search_svr.SyncUserResp
}

var SyncUserResult_Success_DEFAULT *search_svr.SyncUserResp

func (p *SyncUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.SyncUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SyncUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SyncUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SyncUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SyncUserResult) Unmarshal(in []byte) error {
	msg := new(search_svr.SyncUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SyncUserResult) GetSuccess() *search_svr.SyncUserResp {
	if !p.IsSetSuccess() {
		return SyncUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SyncUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.SyncUserResp)
}

func (p *SyncUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SyncUserResult) GetResult() interface{} {
	return p.Success
}

func deleteUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.DeleteUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).DeleteUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteUserArgs:
		success, err := handler.(search_svr.SearchSvr).DeleteUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteUserResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteUserArgs() interface{} {
	return &DeleteUserArgs{}
}

func newDeleteUserResult() interface{} {
	return &DeleteUserResult{}
}

type DeleteUserArgs struct {
	Req *search_svr.DeleteUserReq
}

func (p *DeleteUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.DeleteUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteUserArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.DeleteUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteUserArgs_Req_DEFAULT *search_svr.DeleteUserReq

func (p *DeleteUserArgs) GetReq() *search_svr.DeleteUserReq {
	if !p.IsSetReq() {
		return DeleteUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteUserResult struct {
	Success *search_svr.DeleteUserResp
}

var DeleteUserResult_Success_DEFAULT *search_svr.DeleteUserResp

func (p *DeleteUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.DeleteUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteUserResult) Unmarshal(in []byte) error {
	msg := new(search_svr.DeleteUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteUserResult) GetSuccess() *search_svr.DeleteUserResp {
	if !p.IsSetSuccess() {
		return DeleteUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.DeleteUserResp)
}

func (p *DeleteUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteUserResult) GetResult() interface{} {
	return p.Success
}

func searchUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.SearchUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).SearchUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchUserArgs:
		success, err := handler.(search_svr.SearchSvr).SearchUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchUserResult)
		realResult.Success = success
	}
	return nil
}
func newSearchUserArgs() interface{} {
	return &SearchUserArgs{}
}

func newSearchUserResult() interface{} {
	return &SearchUserResult{}
}

type SearchUserArgs struct {
	Req *search_svr.SearchUserReq
}

func (p *SearchUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.SearchUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchUserArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchUserArgs_Req_DEFAULT *search_svr.SearchUserReq

func (p *SearchUserArgs) GetReq() *search_svr.SearchUserReq {
	if !p.IsSetReq() {
		return SearchUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchUserResult struct {
	Success *search_svr.SearchUserResp
}

var SearchUserResult_Success_DEFAULT *search_svr.SearchUserResp

func (p *SearchUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.SearchUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchUserResult) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchUserResult) GetSuccess() *search_svr.SearchUserResp {
	if !p.IsSetSuccess() {
		return SearchUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.SearchUserResp)
}

func (p *SearchUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchUserResult) GetResult() interface{} {
	return p.Success
}

func getESDocByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.ESDocByIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).GetESDocById(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetESDocByIdArgs:
		success, err := handler.(search_svr.SearchSvr).GetESDocById(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetESDocByIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetESDocByIdArgs() interface{} {
	return &GetESDocByIdArgs{}
}

func newGetESDocByIdResult() interface{} {
	return &GetESDocByIdResult{}
}

type GetESDocByIdArgs struct {
	Req *search_svr.ESDocByIdReq
}

func (p *GetESDocByIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.ESDocByIdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetESDocByIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetESDocByIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetESDocByIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetESDocByIdArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.ESDocByIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetESDocByIdArgs_Req_DEFAULT *search_svr.ESDocByIdReq

func (p *GetESDocByIdArgs) GetReq() *search_svr.ESDocByIdReq {
	if !p.IsSetReq() {
		return GetESDocByIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetESDocByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetESDocByIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetESDocByIdResult struct {
	Success *search_svr.ESDocByIdResp
}

var GetESDocByIdResult_Success_DEFAULT *search_svr.ESDocByIdResp

func (p *GetESDocByIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.ESDocByIdResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetESDocByIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetESDocByIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetESDocByIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetESDocByIdResult) Unmarshal(in []byte) error {
	msg := new(search_svr.ESDocByIdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetESDocByIdResult) GetSuccess() *search_svr.ESDocByIdResp {
	if !p.IsSetSuccess() {
		return GetESDocByIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetESDocByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.ESDocByIdResp)
}

func (p *GetESDocByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetESDocByIdResult) GetResult() interface{} {
	return p.Success
}

func syncMuserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.SyncESMuserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).SyncMuser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SyncMuserArgs:
		success, err := handler.(search_svr.SearchSvr).SyncMuser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SyncMuserResult)
		realResult.Success = success
	}
	return nil
}
func newSyncMuserArgs() interface{} {
	return &SyncMuserArgs{}
}

func newSyncMuserResult() interface{} {
	return &SyncMuserResult{}
}

type SyncMuserArgs struct {
	Req *search_svr.SyncESMuserReq
}

func (p *SyncMuserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.SyncESMuserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SyncMuserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SyncMuserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SyncMuserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SyncMuserArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.SyncESMuserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SyncMuserArgs_Req_DEFAULT *search_svr.SyncESMuserReq

func (p *SyncMuserArgs) GetReq() *search_svr.SyncESMuserReq {
	if !p.IsSetReq() {
		return SyncMuserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SyncMuserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SyncMuserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SyncMuserResult struct {
	Success *search_svr.SyncESMuserResp
}

var SyncMuserResult_Success_DEFAULT *search_svr.SyncESMuserResp

func (p *SyncMuserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.SyncESMuserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SyncMuserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SyncMuserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SyncMuserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SyncMuserResult) Unmarshal(in []byte) error {
	msg := new(search_svr.SyncESMuserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SyncMuserResult) GetSuccess() *search_svr.SyncESMuserResp {
	if !p.IsSetSuccess() {
		return SyncMuserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SyncMuserResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.SyncESMuserResp)
}

func (p *SyncMuserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SyncMuserResult) GetResult() interface{} {
	return p.Success
}

func deleteMuserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.DeleteMuserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).DeleteMuser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteMuserArgs:
		success, err := handler.(search_svr.SearchSvr).DeleteMuser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteMuserResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteMuserArgs() interface{} {
	return &DeleteMuserArgs{}
}

func newDeleteMuserResult() interface{} {
	return &DeleteMuserResult{}
}

type DeleteMuserArgs struct {
	Req *search_svr.DeleteMuserReq
}

func (p *DeleteMuserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.DeleteMuserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteMuserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteMuserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteMuserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteMuserArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.DeleteMuserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteMuserArgs_Req_DEFAULT *search_svr.DeleteMuserReq

func (p *DeleteMuserArgs) GetReq() *search_svr.DeleteMuserReq {
	if !p.IsSetReq() {
		return DeleteMuserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteMuserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteMuserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteMuserResult struct {
	Success *search_svr.DeleteMuserResp
}

var DeleteMuserResult_Success_DEFAULT *search_svr.DeleteMuserResp

func (p *DeleteMuserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.DeleteMuserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteMuserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteMuserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteMuserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteMuserResult) Unmarshal(in []byte) error {
	msg := new(search_svr.DeleteMuserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteMuserResult) GetSuccess() *search_svr.DeleteMuserResp {
	if !p.IsSetSuccess() {
		return DeleteMuserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteMuserResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.DeleteMuserResp)
}

func (p *DeleteMuserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteMuserResult) GetResult() interface{} {
	return p.Success
}

func searchMuserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.SearchESMuserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).SearchMuser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchMuserArgs:
		success, err := handler.(search_svr.SearchSvr).SearchMuser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchMuserResult)
		realResult.Success = success
	}
	return nil
}
func newSearchMuserArgs() interface{} {
	return &SearchMuserArgs{}
}

func newSearchMuserResult() interface{} {
	return &SearchMuserResult{}
}

type SearchMuserArgs struct {
	Req *search_svr.SearchESMuserReq
}

func (p *SearchMuserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.SearchESMuserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchMuserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchMuserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchMuserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchMuserArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchESMuserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchMuserArgs_Req_DEFAULT *search_svr.SearchESMuserReq

func (p *SearchMuserArgs) GetReq() *search_svr.SearchESMuserReq {
	if !p.IsSetReq() {
		return SearchMuserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchMuserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchMuserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchMuserResult struct {
	Success *search_svr.SearchESMuserResp
}

var SearchMuserResult_Success_DEFAULT *search_svr.SearchESMuserResp

func (p *SearchMuserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.SearchESMuserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchMuserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchMuserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchMuserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchMuserResult) Unmarshal(in []byte) error {
	msg := new(search_svr.SearchESMuserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchMuserResult) GetSuccess() *search_svr.SearchESMuserResp {
	if !p.IsSetSuccess() {
		return SearchMuserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchMuserResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.SearchESMuserResp)
}

func (p *SearchMuserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchMuserResult) GetResult() interface{} {
	return p.Success
}

func getMuserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(search_svr.GetESMuserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(search_svr.SearchSvr).GetMuser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetMuserArgs:
		success, err := handler.(search_svr.SearchSvr).GetMuser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMuserResult)
		realResult.Success = success
	}
	return nil
}
func newGetMuserArgs() interface{} {
	return &GetMuserArgs{}
}

func newGetMuserResult() interface{} {
	return &GetMuserResult{}
}

type GetMuserArgs struct {
	Req *search_svr.GetESMuserReq
}

func (p *GetMuserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(search_svr.GetESMuserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMuserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMuserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMuserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMuserArgs) Unmarshal(in []byte) error {
	msg := new(search_svr.GetESMuserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMuserArgs_Req_DEFAULT *search_svr.GetESMuserReq

func (p *GetMuserArgs) GetReq() *search_svr.GetESMuserReq {
	if !p.IsSetReq() {
		return GetMuserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMuserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMuserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMuserResult struct {
	Success *search_svr.GetESMuserResp
}

var GetMuserResult_Success_DEFAULT *search_svr.GetESMuserResp

func (p *GetMuserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(search_svr.GetESMuserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMuserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMuserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMuserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMuserResult) Unmarshal(in []byte) error {
	msg := new(search_svr.GetESMuserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMuserResult) GetSuccess() *search_svr.GetESMuserResp {
	if !p.IsSetSuccess() {
		return GetMuserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMuserResult) SetSuccess(x interface{}) {
	p.Success = x.(*search_svr.GetESMuserResp)
}

func (p *GetMuserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMuserResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SearchHashtagItem(ctx context.Context, Req *search_svr.SearchHashtagItemReq) (r *search_svr.SearchHashtagItemResp, err error) {
	var _args SearchHashtagItemArgs
	_args.Req = Req
	var _result SearchHashtagItemResult
	if err = p.c.Call(ctx, "SearchHashtagItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchItem(ctx context.Context, Req *search_svr.SearchItemReq) (r *search_svr.SearchItemResp, err error) {
	var _args SearchItemArgs
	_args.Req = Req
	var _result SearchItemResult
	if err = p.c.Call(ctx, "SearchItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IndexItem(ctx context.Context, Req *search_svr.IndexItemReq) (r *search_svr.IndexItemResp, err error) {
	var _args IndexItemArgs
	_args.Req = Req
	var _result IndexItemResult
	if err = p.c.Call(ctx, "IndexItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelIndexItem(ctx context.Context, Req *search_svr.DelIndexItemReq) (r *search_svr.DelIndexItemResp, err error) {
	var _args DelIndexItemArgs
	_args.Req = Req
	var _result DelIndexItemResult
	if err = p.c.Call(ctx, "DelIndexItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IndexAllItem4Ug(ctx context.Context, Req *search_svr.IndexAllItem4UgReq) (r *search_svr.IndexAllItem4UgResp, err error) {
	var _args IndexAllItem4UgArgs
	_args.Req = Req
	var _result IndexAllItem4UgResult
	if err = p.c.Call(ctx, "IndexAllItem4Ug", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchItem4Ug(ctx context.Context, Req *search_svr.SearchItem4UgReq) (r *search_svr.SearchItem4UgResp, err error) {
	var _args SearchItem4UgArgs
	_args.Req = Req
	var _result SearchItem4UgResult
	if err = p.c.Call(ctx, "SearchItem4Ug", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchHashtagItem4Ug(ctx context.Context, Req *search_svr.SearchHashtagItem4UgReq) (r *search_svr.SearchHashtagItem4UgResp, err error) {
	var _args SearchHashtagItem4UgArgs
	_args.Req = Req
	var _result SearchHashtagItem4UgResult
	if err = p.c.Call(ctx, "SearchHashtagItem4Ug", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IndexItem4Ug(ctx context.Context, Req *search_svr.IndexItem4UgReq) (r *search_svr.IndexItem4UgResp, err error) {
	var _args IndexItem4UgArgs
	_args.Req = Req
	var _result IndexItem4UgResult
	if err = p.c.Call(ctx, "IndexItem4Ug", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelIndexItem4Ug(ctx context.Context, Req *search_svr.DelIndexItem4UgReq) (r *search_svr.DelIndexItem4UgResp, err error) {
	var _args DelIndexItem4UgArgs
	_args.Req = Req
	var _result DelIndexItem4UgResult
	if err = p.c.Call(ctx, "DelIndexItem4Ug", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchCharacterItem(ctx context.Context, Req *search_svr.SearchCharacterItemReq) (r *search_svr.SearchCharacterItemResp, err error) {
	var _args SearchCharacterItemArgs
	_args.Req = Req
	var _result SearchCharacterItemResult
	if err = p.c.Call(ctx, "SearchCharacterItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IndexCharacterItem(ctx context.Context, Req *search_svr.IndexCharacterItemReq) (r *search_svr.IndexCharacterItemResp, err error) {
	var _args IndexCharacterItemArgs
	_args.Req = Req
	var _result IndexCharacterItemResult
	if err = p.c.Call(ctx, "IndexCharacterItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCharacterItem(ctx context.Context, Req *search_svr.DeleteCharacterItemReq) (r *search_svr.DeleteCharacterItemResp, err error) {
	var _args DeleteCharacterItemArgs
	_args.Req = Req
	var _result DeleteCharacterItemResult
	if err = p.c.Call(ctx, "DeleteCharacterItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchCharacterItemHint(ctx context.Context, Req *search_svr.SearchCharacterItemHintReq) (r *search_svr.SearchCharacterItemHintResp, err error) {
	var _args SearchCharacterItemHintArgs
	_args.Req = Req
	var _result SearchCharacterItemHintResult
	if err = p.c.Call(ctx, "SearchCharacterItemHint", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ESSyncItem(ctx context.Context, Req *search_svr.ESSyncItemReq) (r *search_svr.ESSyncItemResp, err error) {
	var _args ESSyncItemArgs
	_args.Req = Req
	var _result ESSyncItemResult
	if err = p.c.Call(ctx, "ESSyncItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ESBulkSyncItem(ctx context.Context, Req *search_svr.ESBulkSyncItemReq) (r *search_svr.ESBulkSyncItemResp, err error) {
	var _args ESBulkSyncItemArgs
	_args.Req = Req
	var _result ESBulkSyncItemResult
	if err = p.c.Call(ctx, "ESBulkSyncItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ESDeleteItem(ctx context.Context, Req *search_svr.ESDeleteItemReq) (r *search_svr.ESDeleteItemResp, err error) {
	var _args ESDeleteItemArgs
	_args.Req = Req
	var _result ESDeleteItemResult
	if err = p.c.Call(ctx, "ESDeleteItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ESQueryItem(ctx context.Context, Req *search_svr.ESQueryItemReq) (r *search_svr.ESQueryItemResp, err error) {
	var _args ESQueryItemArgs
	_args.Req = Req
	var _result ESQueryItemResult
	if err = p.c.Call(ctx, "ESQueryItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ESMGetItem(ctx context.Context, Req *search_svr.ESMGetItemReq) (r *search_svr.ESMGetItemResp, err error) {
	var _args ESMGetItemArgs
	_args.Req = Req
	var _result ESMGetItemResult
	if err = p.c.Call(ctx, "ESMGetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BulkCreateHashtagItem(ctx context.Context, Req *search_svr.BulkCreateHashtagItemReq) (r *search_svr.BulkCreateHashtagItemResp, err error) {
	var _args BulkCreateHashtagItemArgs
	_args.Req = Req
	var _result BulkCreateHashtagItemResult
	if err = p.c.Call(ctx, "BulkCreateHashtagItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateHashtagItemSexualScore(ctx context.Context, Req *search_svr.UpdateHashtagItemSexualScoreReq) (r *search_svr.UpdateHashtagItemSexualScoreResp, err error) {
	var _args UpdateHashtagItemSexualScoreArgs
	_args.Req = Req
	var _result UpdateHashtagItemSexualScoreResult
	if err = p.c.Call(ctx, "UpdateHashtagItemSexualScore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SyncUser(ctx context.Context, Req *search_svr.SyncUserReq) (r *search_svr.SyncUserResp, err error) {
	var _args SyncUserArgs
	_args.Req = Req
	var _result SyncUserResult
	if err = p.c.Call(ctx, "SyncUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUser(ctx context.Context, Req *search_svr.DeleteUserReq) (r *search_svr.DeleteUserResp, err error) {
	var _args DeleteUserArgs
	_args.Req = Req
	var _result DeleteUserResult
	if err = p.c.Call(ctx, "DeleteUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchUser(ctx context.Context, Req *search_svr.SearchUserReq) (r *search_svr.SearchUserResp, err error) {
	var _args SearchUserArgs
	_args.Req = Req
	var _result SearchUserResult
	if err = p.c.Call(ctx, "SearchUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetESDocById(ctx context.Context, Req *search_svr.ESDocByIdReq) (r *search_svr.ESDocByIdResp, err error) {
	var _args GetESDocByIdArgs
	_args.Req = Req
	var _result GetESDocByIdResult
	if err = p.c.Call(ctx, "GetESDocById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SyncMuser(ctx context.Context, Req *search_svr.SyncESMuserReq) (r *search_svr.SyncESMuserResp, err error) {
	var _args SyncMuserArgs
	_args.Req = Req
	var _result SyncMuserResult
	if err = p.c.Call(ctx, "SyncMuser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMuser(ctx context.Context, Req *search_svr.DeleteMuserReq) (r *search_svr.DeleteMuserResp, err error) {
	var _args DeleteMuserArgs
	_args.Req = Req
	var _result DeleteMuserResult
	if err = p.c.Call(ctx, "DeleteMuser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchMuser(ctx context.Context, Req *search_svr.SearchESMuserReq) (r *search_svr.SearchESMuserResp, err error) {
	var _args SearchMuserArgs
	_args.Req = Req
	var _result SearchMuserResult
	if err = p.c.Call(ctx, "SearchMuser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMuser(ctx context.Context, Req *search_svr.GetESMuserReq) (r *search_svr.GetESMuserResp, err error) {
	var _args GetMuserArgs
	_args.Req = Req
	var _result GetMuserResult
	if err = p.c.Call(ctx, "GetMuser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
