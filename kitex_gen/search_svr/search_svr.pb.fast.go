// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package search_svr

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	base "rpc_test/kitex_gen/base"
	biz_es_model_item "rpc_test/kitex_gen/service/es_model/biz_es_model_item"
	biz_model_search "rpc_test/kitex_gen/service/model/biz_model_search"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SearchHashtagItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchHashtagItemReq[number], err)
}

func (x *SearchHashtagItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Hashtag, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchHashtagItemReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cursor, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchHashtagItemReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SearchHashtagItemReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.SearchMode = SearchMode(v)
	return offset, nil
}

func (x *SearchHashtagItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchHashtagItemResp[number], err)
}

func (x *SearchHashtagItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchHashtagItemResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ItemIds = append(x.ItemIds, v)
			return offset, err
		})
	return offset, err
}

func (x *SearchHashtagItemResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NextCursor, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchHashtagItemResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.HasMore, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *SearchHashtagItemResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchItemReq[number], err)
}

func (x *SearchItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Keyword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchItemReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.From, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchItemReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SearchItemReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.SearchMode = SearchMode(v)
	return offset, nil
}

func (x *SearchItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchItemResp[number], err)
}

func (x *SearchItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchItemResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v biz_model_search.ItemIndex
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, &v)
	return offset, nil
}

func (x *SearchItemResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IndexItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IndexItemReq[number], err)
}

func (x *IndexItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IndexItemReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *IndexItemReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *IndexItemReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Hashtags = append(x.Hashtags, v)
	return offset, err
}

func (x *IndexItemReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IndexItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IndexItemResp[number], err)
}

func (x *IndexItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *DelIndexItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DelIndexItemReq[number], err)
}

func (x *DelIndexItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DelIndexItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DelIndexItemResp[number], err)
}

func (x *DelIndexItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchItem4UgReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchItem4UgReq[number], err)
}

func (x *SearchItem4UgReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Keyword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchItem4UgReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.From, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchItem4UgReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SearchItem4UgReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.SearchMode = SearchMode(v)
	return offset, nil
}

func (x *SearchItem4UgReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.SortType = SortType(v)
	return offset, nil
}

func (x *SearchItem4UgResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchItem4UgResp[number], err)
}

func (x *SearchItem4UgResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchItem4UgResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v biz_model_search.ItemIndexUg
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, &v)
	return offset, nil
}

func (x *SearchItem4UgResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchHashtagItem4UgReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchHashtagItem4UgReq[number], err)
}

func (x *SearchHashtagItem4UgReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Hashtag, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchHashtagItem4UgReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.From, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchHashtagItem4UgReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SearchHashtagItem4UgResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchHashtagItem4UgResp[number], err)
}

func (x *SearchHashtagItem4UgResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchHashtagItem4UgResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v biz_model_search.ItemIndexUg
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, &v)
	return offset, nil
}

func (x *SearchHashtagItem4UgResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IndexItem4UgReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IndexItem4UgReq[number], err)
}

func (x *IndexItem4UgReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IndexItem4UgResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IndexItem4UgResp[number], err)
}

func (x *IndexItem4UgResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *DelIndexItem4UgReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DelIndexItem4UgReq[number], err)
}

func (x *DelIndexItem4UgReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DelIndexItem4UgResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DelIndexItem4UgResp[number], err)
}

func (x *DelIndexItem4UgResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *IndexAllItem4UgReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *IndexAllItem4UgResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IndexAllItem4UgResp[number], err)
}

func (x *IndexAllItem4UgResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchCharacterItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchCharacterItemReq[number], err)
}

func (x *SearchCharacterItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Keyword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cursor, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.SearchMode = SearchMode(v)
	return offset, nil
}

func (x *SearchCharacterItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchCharacterItemResp[number], err)
}

func (x *SearchCharacterItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchCharacterItemResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v biz_model_search.CharacterItemIndex
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, &v)
	return offset, nil
}

func (x *SearchCharacterItemResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NextCursor, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.HasMore, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemHintReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchCharacterItemHintReq[number], err)
}

func (x *SearchCharacterItemHintReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Keyword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemHintReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cursor, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemHintReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemHintReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.SearchMode = SearchMode(v)
	return offset, nil
}

func (x *SearchCharacterItemHintResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchCharacterItemHintResp[number], err)
}

func (x *SearchCharacterItemHintResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchCharacterItemHintResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Hints = append(x.Hints, v)
	return offset, err
}

func (x *SearchCharacterItemHintResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NextCursor, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemHintResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.HasMore, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *SearchCharacterItemHintResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IndexCharacterItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IndexCharacterItemReq[number], err)
}

func (x *IndexCharacterItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ItemIds = append(x.ItemIds, v)
			return offset, err
		})
	return offset, err
}

func (x *IndexCharacterItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IndexCharacterItemResp[number], err)
}

func (x *IndexCharacterItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *DeleteCharacterItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCharacterItemReq[number], err)
}

func (x *DeleteCharacterItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteCharacterItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCharacterItemResp[number], err)
}

func (x *DeleteCharacterItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *ESSyncItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESSyncItemReq[number], err)
}

func (x *ESSyncItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ESSyncItemReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MuserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ESSyncItemReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.MuserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ESSyncItemReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ESSyncItemReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ESSyncItemReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Bio, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ESSyncItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESSyncItemResp[number], err)
}

func (x *ESSyncItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *ESBulkSyncItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESBulkSyncItemReq[number], err)
}

func (x *ESBulkSyncItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ESSyncItemReq
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, &v)
	return offset, nil
}

func (x *ESBulkSyncItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESBulkSyncItemResp[number], err)
}

func (x *ESBulkSyncItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *ESDeleteItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESDeleteItemReq[number], err)
}

func (x *ESDeleteItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ESDeleteItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESDeleteItemResp[number], err)
}

func (x *ESDeleteItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *ESQueryItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESQueryItemReq[number], err)
}

func (x *ESQueryItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Query, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *ESQueryItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESQueryItemResp[number], err)
}

func (x *ESQueryItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *ESQueryItemResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Items, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *ESMGetItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESMGetItemReq[number], err)
}

func (x *ESMGetItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ESMGetItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESMGetItemResp[number], err)
}

func (x *ESMGetItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *ESMGetItemResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Item, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *HashtagItem) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_HashtagItem[number], err)
}

func (x *HashtagItem) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.HashtagId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *HashtagItem) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ItemId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *HashtagItem) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Hashtag, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HashtagItem) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.SexualScore, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *HashtagItem) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BulkCreateHashtagItemReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BulkCreateHashtagItemReq[number], err)
}

func (x *BulkCreateHashtagItemReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v HashtagItem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, &v)
	return offset, nil
}

func (x *BulkCreateHashtagItemResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BulkCreateHashtagItemResp[number], err)
}

func (x *BulkCreateHashtagItemResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *UpdateHashtagItemSexualScoreReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateHashtagItemSexualScoreReq[number], err)
}

func (x *UpdateHashtagItemSexualScoreReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Query, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *UpdateHashtagItemSexualScoreResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateHashtagItemSexualScoreResp[number], err)
}

func (x *UpdateHashtagItemSexualScoreResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *ESUser) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESUser[number], err)
}

func (x *ESUser) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ESUser) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ESUser) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NickName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ESUser) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.DeviceIDs = append(x.DeviceIDs, v)
			return offset, err
		})
	return offset, err
}

func (x *ESUser) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Channels = append(x.Channels, v)
	return offset, err
}

func (x *ESUser) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CreatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SyncUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SyncUserReq[number], err)
}

func (x *SyncUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ESUser
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.User = &v
	return offset, nil
}

func (x *SyncUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SyncUserResp[number], err)
}

func (x *SyncUserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *DeleteUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteUserReq[number], err)
}

func (x *DeleteUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteUserResp[number], err)
}

func (x *DeleteUserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchUserReq[number], err)
}

func (x *SearchUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Query, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *SearchUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchUserResp[number], err)
}

func (x *SearchUserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchUserResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Users, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *ESDocByIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESDocByIdReq[number], err)
}

func (x *ESDocByIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.DocID, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ESDocByIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESDocByIdResp[number], err)
}

func (x *ESDocByIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *ESDocByIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Doc, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *ESMuser) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ESMuser[number], err)
}

func (x *ESMuser) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MuserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ESMuser) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MuserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ESMuser) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SyncESMuserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SyncESMuserReq[number], err)
}

func (x *SyncESMuserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ESMuser
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Muser = &v
	return offset, nil
}

func (x *SyncESMuserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SyncESMuserResp[number], err)
}

func (x *SyncESMuserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *DeleteMuserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteMuserReq[number], err)
}

func (x *DeleteMuserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MuserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteMuserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteMuserResp[number], err)
}

func (x *DeleteMuserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchESMuserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchESMuserReq[number], err)
}

func (x *SearchESMuserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Query, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *SearchESMuserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchESMuserResp[number], err)
}

func (x *SearchESMuserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *SearchESMuserResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Muser, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *GetESMuserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetESMuserReq[number], err)
}

func (x *GetESMuserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MuserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetESMuserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetESMuserResp[number], err)
}

func (x *GetESMuserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetESMuserResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Muser, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *SearchHashtagItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SearchHashtagItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.Hashtag == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetHashtag())
	return offset
}

func (x *SearchHashtagItemReq) fastWriteField2(buf []byte) (offset int) {
	if x.Cursor == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCursor())
	return offset
}

func (x *SearchHashtagItemReq) fastWriteField3(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetLimit())
	return offset
}

func (x *SearchHashtagItemReq) fastWriteField4(buf []byte) (offset int) {
	if x.SearchMode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetSearchMode()))
	return offset
}

func (x *SearchHashtagItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SearchHashtagItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchHashtagItemResp) fastWriteField2(buf []byte) (offset int) {
	if len(x.ItemIds) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 2, len(x.GetItemIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetItemIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *SearchHashtagItemResp) fastWriteField3(buf []byte) (offset int) {
	if x.NextCursor == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetNextCursor())
	return offset
}

func (x *SearchHashtagItemResp) fastWriteField4(buf []byte) (offset int) {
	if !x.HasMore {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetHasMore())
	return offset
}

func (x *SearchHashtagItemResp) fastWriteField5(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetTotal())
	return offset
}

func (x *SearchItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SearchItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.Keyword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKeyword())
	return offset
}

func (x *SearchItemReq) fastWriteField2(buf []byte) (offset int) {
	if x.From == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetFrom())
	return offset
}

func (x *SearchItemReq) fastWriteField3(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetLimit())
	return offset
}

func (x *SearchItemReq) fastWriteField4(buf []byte) (offset int) {
	if x.SearchMode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetSearchMode()))
	return offset
}

func (x *SearchItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SearchItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchItemResp) fastWriteField2(buf []byte) (offset int) {
	if x.Items == nil {
		return offset
	}
	for i := range x.GetItems() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetItems()[i])
	}
	return offset
}

func (x *SearchItemResp) fastWriteField3(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetTotal())
	return offset
}

func (x *IndexItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *IndexItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *IndexItemReq) fastWriteField2(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *IndexItemReq) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *IndexItemReq) fastWriteField4(buf []byte) (offset int) {
	if len(x.Hashtags) == 0 {
		return offset
	}
	for i := range x.GetHashtags() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetHashtags()[i])
	}
	return offset
}

func (x *IndexItemReq) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *IndexItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *IndexItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *DelIndexItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DelIndexItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *DelIndexItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DelIndexItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchItem4UgReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SearchItem4UgReq) fastWriteField1(buf []byte) (offset int) {
	if x.Keyword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKeyword())
	return offset
}

func (x *SearchItem4UgReq) fastWriteField2(buf []byte) (offset int) {
	if x.From == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetFrom())
	return offset
}

func (x *SearchItem4UgReq) fastWriteField3(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetLimit())
	return offset
}

func (x *SearchItem4UgReq) fastWriteField4(buf []byte) (offset int) {
	if x.SearchMode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetSearchMode()))
	return offset
}

func (x *SearchItem4UgReq) fastWriteField5(buf []byte) (offset int) {
	if x.SortType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetSortType()))
	return offset
}

func (x *SearchItem4UgResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SearchItem4UgResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchItem4UgResp) fastWriteField2(buf []byte) (offset int) {
	if x.Items == nil {
		return offset
	}
	for i := range x.GetItems() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetItems()[i])
	}
	return offset
}

func (x *SearchItem4UgResp) fastWriteField3(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetTotal())
	return offset
}

func (x *SearchHashtagItem4UgReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SearchHashtagItem4UgReq) fastWriteField1(buf []byte) (offset int) {
	if x.Hashtag == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetHashtag())
	return offset
}

func (x *SearchHashtagItem4UgReq) fastWriteField2(buf []byte) (offset int) {
	if x.From == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetFrom())
	return offset
}

func (x *SearchHashtagItem4UgReq) fastWriteField3(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetLimit())
	return offset
}

func (x *SearchHashtagItem4UgResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SearchHashtagItem4UgResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchHashtagItem4UgResp) fastWriteField2(buf []byte) (offset int) {
	if x.Items == nil {
		return offset
	}
	for i := range x.GetItems() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetItems()[i])
	}
	return offset
}

func (x *SearchHashtagItem4UgResp) fastWriteField3(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetTotal())
	return offset
}

func (x *IndexItem4UgReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *IndexItem4UgReq) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *IndexItem4UgResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *IndexItem4UgResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *DelIndexItem4UgReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DelIndexItem4UgReq) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *DelIndexItem4UgResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DelIndexItem4UgResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *IndexAllItem4UgReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *IndexAllItem4UgResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *IndexAllItem4UgResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchCharacterItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SearchCharacterItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.Keyword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKeyword())
	return offset
}

func (x *SearchCharacterItemReq) fastWriteField2(buf []byte) (offset int) {
	if x.Cursor == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCursor())
	return offset
}

func (x *SearchCharacterItemReq) fastWriteField3(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetLimit())
	return offset
}

func (x *SearchCharacterItemReq) fastWriteField4(buf []byte) (offset int) {
	if x.SearchMode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetSearchMode()))
	return offset
}

func (x *SearchCharacterItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SearchCharacterItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchCharacterItemResp) fastWriteField2(buf []byte) (offset int) {
	if x.Items == nil {
		return offset
	}
	for i := range x.GetItems() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetItems()[i])
	}
	return offset
}

func (x *SearchCharacterItemResp) fastWriteField3(buf []byte) (offset int) {
	if x.NextCursor == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetNextCursor())
	return offset
}

func (x *SearchCharacterItemResp) fastWriteField4(buf []byte) (offset int) {
	if !x.HasMore {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetHasMore())
	return offset
}

func (x *SearchCharacterItemResp) fastWriteField5(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetTotal())
	return offset
}

func (x *SearchCharacterItemHintReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SearchCharacterItemHintReq) fastWriteField1(buf []byte) (offset int) {
	if x.Keyword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKeyword())
	return offset
}

func (x *SearchCharacterItemHintReq) fastWriteField2(buf []byte) (offset int) {
	if x.Cursor == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCursor())
	return offset
}

func (x *SearchCharacterItemHintReq) fastWriteField3(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetLimit())
	return offset
}

func (x *SearchCharacterItemHintReq) fastWriteField4(buf []byte) (offset int) {
	if x.SearchMode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetSearchMode()))
	return offset
}

func (x *SearchCharacterItemHintResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SearchCharacterItemHintResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchCharacterItemHintResp) fastWriteField2(buf []byte) (offset int) {
	if len(x.Hints) == 0 {
		return offset
	}
	for i := range x.GetHints() {
		offset += fastpb.WriteString(buf[offset:], 2, x.GetHints()[i])
	}
	return offset
}

func (x *SearchCharacterItemHintResp) fastWriteField3(buf []byte) (offset int) {
	if x.NextCursor == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetNextCursor())
	return offset
}

func (x *SearchCharacterItemHintResp) fastWriteField4(buf []byte) (offset int) {
	if !x.HasMore {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetHasMore())
	return offset
}

func (x *SearchCharacterItemHintResp) fastWriteField5(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetTotal())
	return offset
}

func (x *IndexCharacterItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *IndexCharacterItemReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.ItemIds) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetItemIds()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetItemIds()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *IndexCharacterItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *IndexCharacterItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *DeleteCharacterItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCharacterItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *DeleteCharacterItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCharacterItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *ESSyncItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ESSyncItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *ESSyncItemReq) fastWriteField2(buf []byte) (offset int) {
	if x.MuserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetMuserId())
	return offset
}

func (x *ESSyncItemReq) fastWriteField3(buf []byte) (offset int) {
	if x.MuserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMuserName())
	return offset
}

func (x *ESSyncItemReq) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *ESSyncItemReq) fastWriteField5(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetTitle())
	return offset
}

func (x *ESSyncItemReq) fastWriteField6(buf []byte) (offset int) {
	if x.Bio == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetBio())
	return offset
}

func (x *ESSyncItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ESSyncItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *ESBulkSyncItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ESBulkSyncItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.Items == nil {
		return offset
	}
	for i := range x.GetItems() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetItems()[i])
	}
	return offset
}

func (x *ESBulkSyncItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ESBulkSyncItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *ESDeleteItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ESDeleteItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *ESDeleteItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ESDeleteItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *ESQueryItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ESQueryItemReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Query) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 1, x.GetQuery())
	return offset
}

func (x *ESQueryItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ESQueryItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *ESQueryItemResp) fastWriteField2(buf []byte) (offset int) {
	if len(x.Items) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetItems())
	return offset
}

func (x *ESMGetItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ESMGetItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetItemId())
	return offset
}

func (x *ESMGetItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ESMGetItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *ESMGetItemResp) fastWriteField2(buf []byte) (offset int) {
	if len(x.Item) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetItem())
	return offset
}

func (x *HashtagItem) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *HashtagItem) fastWriteField1(buf []byte) (offset int) {
	if x.HashtagId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetHashtagId())
	return offset
}

func (x *HashtagItem) fastWriteField2(buf []byte) (offset int) {
	if x.ItemId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetItemId())
	return offset
}

func (x *HashtagItem) fastWriteField3(buf []byte) (offset int) {
	if x.Hashtag == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetHashtag())
	return offset
}

func (x *HashtagItem) fastWriteField4(buf []byte) (offset int) {
	if x.SexualScore == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 4, x.GetSexualScore())
	return offset
}

func (x *HashtagItem) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *BulkCreateHashtagItemReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *BulkCreateHashtagItemReq) fastWriteField1(buf []byte) (offset int) {
	if x.Items == nil {
		return offset
	}
	for i := range x.GetItems() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetItems()[i])
	}
	return offset
}

func (x *BulkCreateHashtagItemResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *BulkCreateHashtagItemResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *UpdateHashtagItemSexualScoreReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UpdateHashtagItemSexualScoreReq) fastWriteField3(buf []byte) (offset int) {
	if len(x.Query) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 3, x.GetQuery())
	return offset
}

func (x *UpdateHashtagItemSexualScoreResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateHashtagItemSexualScoreResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *ESUser) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ESUser) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *ESUser) fastWriteField2(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetEmail())
	return offset
}

func (x *ESUser) fastWriteField3(buf []byte) (offset int) {
	if x.NickName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetNickName())
	return offset
}

func (x *ESUser) fastWriteField4(buf []byte) (offset int) {
	if len(x.DeviceIDs) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 4, len(x.GetDeviceIDs()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetDeviceIDs()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *ESUser) fastWriteField5(buf []byte) (offset int) {
	if len(x.Channels) == 0 {
		return offset
	}
	for i := range x.GetChannels() {
		offset += fastpb.WriteString(buf[offset:], 5, x.GetChannels()[i])
	}
	return offset
}

func (x *ESUser) fastWriteField6(buf []byte) (offset int) {
	if x.CreatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCreatedAt())
	return offset
}

func (x *SyncUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SyncUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.User == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUser())
	return offset
}

func (x *SyncUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SyncUserResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *DeleteUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *DeleteUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteUserResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SearchUserReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Query) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 1, x.GetQuery())
	return offset
}

func (x *SearchUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SearchUserResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchUserResp) fastWriteField2(buf []byte) (offset int) {
	if len(x.Users) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetUsers())
	return offset
}

func (x *ESDocByIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ESDocByIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.DocID == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetDocID())
	return offset
}

func (x *ESDocByIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ESDocByIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *ESDocByIdResp) fastWriteField2(buf []byte) (offset int) {
	if len(x.Doc) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetDoc())
	return offset
}

func (x *ESMuser) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ESMuser) fastWriteField1(buf []byte) (offset int) {
	if x.MuserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetMuserID())
	return offset
}

func (x *ESMuser) fastWriteField2(buf []byte) (offset int) {
	if x.MuserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMuserName())
	return offset
}

func (x *ESMuser) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *SyncESMuserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SyncESMuserReq) fastWriteField1(buf []byte) (offset int) {
	if x.Muser == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMuser())
	return offset
}

func (x *SyncESMuserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SyncESMuserResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *DeleteMuserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteMuserReq) fastWriteField1(buf []byte) (offset int) {
	if x.MuserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetMuserId())
	return offset
}

func (x *DeleteMuserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteMuserResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchESMuserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SearchESMuserReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Query) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 1, x.GetQuery())
	return offset
}

func (x *SearchESMuserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SearchESMuserResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *SearchESMuserResp) fastWriteField2(buf []byte) (offset int) {
	if len(x.Muser) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetMuser())
	return offset
}

func (x *GetESMuserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetESMuserReq) fastWriteField1(buf []byte) (offset int) {
	if x.MuserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetMuserId())
	return offset
}

func (x *GetESMuserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetESMuserResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseResp())
	return offset
}

func (x *GetESMuserResp) fastWriteField2(buf []byte) (offset int) {
	if len(x.Muser) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetMuser())
	return offset
}

func (x *SearchHashtagItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SearchHashtagItemReq) sizeField1() (n int) {
	if x.Hashtag == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetHashtag())
	return n
}

func (x *SearchHashtagItemReq) sizeField2() (n int) {
	if x.Cursor == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCursor())
	return n
}

func (x *SearchHashtagItemReq) sizeField3() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetLimit())
	return n
}

func (x *SearchHashtagItemReq) sizeField4() (n int) {
	if x.SearchMode == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetSearchMode()))
	return n
}

func (x *SearchHashtagItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SearchHashtagItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchHashtagItemResp) sizeField2() (n int) {
	if len(x.ItemIds) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(2, len(x.GetItemIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetItemIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *SearchHashtagItemResp) sizeField3() (n int) {
	if x.NextCursor == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetNextCursor())
	return n
}

func (x *SearchHashtagItemResp) sizeField4() (n int) {
	if !x.HasMore {
		return n
	}
	n += fastpb.SizeBool(4, x.GetHasMore())
	return n
}

func (x *SearchHashtagItemResp) sizeField5() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetTotal())
	return n
}

func (x *SearchItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SearchItemReq) sizeField1() (n int) {
	if x.Keyword == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKeyword())
	return n
}

func (x *SearchItemReq) sizeField2() (n int) {
	if x.From == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetFrom())
	return n
}

func (x *SearchItemReq) sizeField3() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetLimit())
	return n
}

func (x *SearchItemReq) sizeField4() (n int) {
	if x.SearchMode == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetSearchMode()))
	return n
}

func (x *SearchItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SearchItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchItemResp) sizeField2() (n int) {
	if x.Items == nil {
		return n
	}
	for i := range x.GetItems() {
		n += fastpb.SizeMessage(2, x.GetItems()[i])
	}
	return n
}

func (x *SearchItemResp) sizeField3() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetTotal())
	return n
}

func (x *IndexItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *IndexItemReq) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *IndexItemReq) sizeField2() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *IndexItemReq) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *IndexItemReq) sizeField4() (n int) {
	if len(x.Hashtags) == 0 {
		return n
	}
	for i := range x.GetHashtags() {
		n += fastpb.SizeString(4, x.GetHashtags()[i])
	}
	return n
}

func (x *IndexItemReq) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

func (x *IndexItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *IndexItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *DelIndexItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DelIndexItemReq) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *DelIndexItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DelIndexItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchItem4UgReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SearchItem4UgReq) sizeField1() (n int) {
	if x.Keyword == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKeyword())
	return n
}

func (x *SearchItem4UgReq) sizeField2() (n int) {
	if x.From == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetFrom())
	return n
}

func (x *SearchItem4UgReq) sizeField3() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetLimit())
	return n
}

func (x *SearchItem4UgReq) sizeField4() (n int) {
	if x.SearchMode == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetSearchMode()))
	return n
}

func (x *SearchItem4UgReq) sizeField5() (n int) {
	if x.SortType == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetSortType()))
	return n
}

func (x *SearchItem4UgResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SearchItem4UgResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchItem4UgResp) sizeField2() (n int) {
	if x.Items == nil {
		return n
	}
	for i := range x.GetItems() {
		n += fastpb.SizeMessage(2, x.GetItems()[i])
	}
	return n
}

func (x *SearchItem4UgResp) sizeField3() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetTotal())
	return n
}

func (x *SearchHashtagItem4UgReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SearchHashtagItem4UgReq) sizeField1() (n int) {
	if x.Hashtag == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetHashtag())
	return n
}

func (x *SearchHashtagItem4UgReq) sizeField2() (n int) {
	if x.From == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetFrom())
	return n
}

func (x *SearchHashtagItem4UgReq) sizeField3() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetLimit())
	return n
}

func (x *SearchHashtagItem4UgResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SearchHashtagItem4UgResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchHashtagItem4UgResp) sizeField2() (n int) {
	if x.Items == nil {
		return n
	}
	for i := range x.GetItems() {
		n += fastpb.SizeMessage(2, x.GetItems()[i])
	}
	return n
}

func (x *SearchHashtagItem4UgResp) sizeField3() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetTotal())
	return n
}

func (x *IndexItem4UgReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *IndexItem4UgReq) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *IndexItem4UgResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *IndexItem4UgResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *DelIndexItem4UgReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DelIndexItem4UgReq) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *DelIndexItem4UgResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DelIndexItem4UgResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *IndexAllItem4UgReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *IndexAllItem4UgResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *IndexAllItem4UgResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchCharacterItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SearchCharacterItemReq) sizeField1() (n int) {
	if x.Keyword == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKeyword())
	return n
}

func (x *SearchCharacterItemReq) sizeField2() (n int) {
	if x.Cursor == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCursor())
	return n
}

func (x *SearchCharacterItemReq) sizeField3() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetLimit())
	return n
}

func (x *SearchCharacterItemReq) sizeField4() (n int) {
	if x.SearchMode == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetSearchMode()))
	return n
}

func (x *SearchCharacterItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SearchCharacterItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchCharacterItemResp) sizeField2() (n int) {
	if x.Items == nil {
		return n
	}
	for i := range x.GetItems() {
		n += fastpb.SizeMessage(2, x.GetItems()[i])
	}
	return n
}

func (x *SearchCharacterItemResp) sizeField3() (n int) {
	if x.NextCursor == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetNextCursor())
	return n
}

func (x *SearchCharacterItemResp) sizeField4() (n int) {
	if !x.HasMore {
		return n
	}
	n += fastpb.SizeBool(4, x.GetHasMore())
	return n
}

func (x *SearchCharacterItemResp) sizeField5() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetTotal())
	return n
}

func (x *SearchCharacterItemHintReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SearchCharacterItemHintReq) sizeField1() (n int) {
	if x.Keyword == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKeyword())
	return n
}

func (x *SearchCharacterItemHintReq) sizeField2() (n int) {
	if x.Cursor == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCursor())
	return n
}

func (x *SearchCharacterItemHintReq) sizeField3() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetLimit())
	return n
}

func (x *SearchCharacterItemHintReq) sizeField4() (n int) {
	if x.SearchMode == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetSearchMode()))
	return n
}

func (x *SearchCharacterItemHintResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SearchCharacterItemHintResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchCharacterItemHintResp) sizeField2() (n int) {
	if len(x.Hints) == 0 {
		return n
	}
	for i := range x.GetHints() {
		n += fastpb.SizeString(2, x.GetHints()[i])
	}
	return n
}

func (x *SearchCharacterItemHintResp) sizeField3() (n int) {
	if x.NextCursor == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetNextCursor())
	return n
}

func (x *SearchCharacterItemHintResp) sizeField4() (n int) {
	if !x.HasMore {
		return n
	}
	n += fastpb.SizeBool(4, x.GetHasMore())
	return n
}

func (x *SearchCharacterItemHintResp) sizeField5() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetTotal())
	return n
}

func (x *IndexCharacterItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *IndexCharacterItemReq) sizeField1() (n int) {
	if len(x.ItemIds) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetItemIds()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetItemIds()[numIdxOrVal])
			return n
		})
	return n
}

func (x *IndexCharacterItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *IndexCharacterItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *DeleteCharacterItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCharacterItemReq) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *DeleteCharacterItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCharacterItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *ESSyncItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ESSyncItemReq) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *ESSyncItemReq) sizeField2() (n int) {
	if x.MuserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetMuserId())
	return n
}

func (x *ESSyncItemReq) sizeField3() (n int) {
	if x.MuserName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMuserName())
	return n
}

func (x *ESSyncItemReq) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

func (x *ESSyncItemReq) sizeField5() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetTitle())
	return n
}

func (x *ESSyncItemReq) sizeField6() (n int) {
	if x.Bio == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetBio())
	return n
}

func (x *ESSyncItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ESSyncItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *ESBulkSyncItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ESBulkSyncItemReq) sizeField1() (n int) {
	if x.Items == nil {
		return n
	}
	for i := range x.GetItems() {
		n += fastpb.SizeMessage(1, x.GetItems()[i])
	}
	return n
}

func (x *ESBulkSyncItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ESBulkSyncItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *ESDeleteItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ESDeleteItemReq) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *ESDeleteItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ESDeleteItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *ESQueryItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ESQueryItemReq) sizeField1() (n int) {
	if len(x.Query) == 0 {
		return n
	}
	n += fastpb.SizeBytes(1, x.GetQuery())
	return n
}

func (x *ESQueryItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ESQueryItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *ESQueryItemResp) sizeField2() (n int) {
	if len(x.Items) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetItems())
	return n
}

func (x *ESMGetItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ESMGetItemReq) sizeField1() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetItemId())
	return n
}

func (x *ESMGetItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ESMGetItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *ESMGetItemResp) sizeField2() (n int) {
	if len(x.Item) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetItem())
	return n
}

func (x *HashtagItem) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *HashtagItem) sizeField1() (n int) {
	if x.HashtagId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetHashtagId())
	return n
}

func (x *HashtagItem) sizeField2() (n int) {
	if x.ItemId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetItemId())
	return n
}

func (x *HashtagItem) sizeField3() (n int) {
	if x.Hashtag == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetHashtag())
	return n
}

func (x *HashtagItem) sizeField4() (n int) {
	if x.SexualScore == 0 {
		return n
	}
	n += fastpb.SizeFloat(4, x.GetSexualScore())
	return n
}

func (x *HashtagItem) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

func (x *BulkCreateHashtagItemReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *BulkCreateHashtagItemReq) sizeField1() (n int) {
	if x.Items == nil {
		return n
	}
	for i := range x.GetItems() {
		n += fastpb.SizeMessage(1, x.GetItems()[i])
	}
	return n
}

func (x *BulkCreateHashtagItemResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *BulkCreateHashtagItemResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *UpdateHashtagItemSexualScoreReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField3()
	return n
}

func (x *UpdateHashtagItemSexualScoreReq) sizeField3() (n int) {
	if len(x.Query) == 0 {
		return n
	}
	n += fastpb.SizeBytes(3, x.GetQuery())
	return n
}

func (x *UpdateHashtagItemSexualScoreResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateHashtagItemSexualScoreResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *ESUser) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ESUser) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *ESUser) sizeField2() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetEmail())
	return n
}

func (x *ESUser) sizeField3() (n int) {
	if x.NickName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetNickName())
	return n
}

func (x *ESUser) sizeField4() (n int) {
	if len(x.DeviceIDs) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(4, len(x.GetDeviceIDs()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetDeviceIDs()[numIdxOrVal])
			return n
		})
	return n
}

func (x *ESUser) sizeField5() (n int) {
	if len(x.Channels) == 0 {
		return n
	}
	for i := range x.GetChannels() {
		n += fastpb.SizeString(5, x.GetChannels()[i])
	}
	return n
}

func (x *ESUser) sizeField6() (n int) {
	if x.CreatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCreatedAt())
	return n
}

func (x *SyncUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SyncUserReq) sizeField1() (n int) {
	if x.User == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUser())
	return n
}

func (x *SyncUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SyncUserResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *DeleteUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteUserReq) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *DeleteUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteUserResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SearchUserReq) sizeField1() (n int) {
	if len(x.Query) == 0 {
		return n
	}
	n += fastpb.SizeBytes(1, x.GetQuery())
	return n
}

func (x *SearchUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SearchUserResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchUserResp) sizeField2() (n int) {
	if len(x.Users) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetUsers())
	return n
}

func (x *ESDocByIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ESDocByIdReq) sizeField1() (n int) {
	if x.DocID == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetDocID())
	return n
}

func (x *ESDocByIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ESDocByIdResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *ESDocByIdResp) sizeField2() (n int) {
	if len(x.Doc) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetDoc())
	return n
}

func (x *ESMuser) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ESMuser) sizeField1() (n int) {
	if x.MuserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetMuserID())
	return n
}

func (x *ESMuser) sizeField2() (n int) {
	if x.MuserName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMuserName())
	return n
}

func (x *ESMuser) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *SyncESMuserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SyncESMuserReq) sizeField1() (n int) {
	if x.Muser == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMuser())
	return n
}

func (x *SyncESMuserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SyncESMuserResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *DeleteMuserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteMuserReq) sizeField1() (n int) {
	if x.MuserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetMuserId())
	return n
}

func (x *DeleteMuserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteMuserResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchESMuserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SearchESMuserReq) sizeField1() (n int) {
	if len(x.Query) == 0 {
		return n
	}
	n += fastpb.SizeBytes(1, x.GetQuery())
	return n
}

func (x *SearchESMuserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SearchESMuserResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *SearchESMuserResp) sizeField2() (n int) {
	if len(x.Muser) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetMuser())
	return n
}

func (x *GetESMuserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetESMuserReq) sizeField1() (n int) {
	if x.MuserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetMuserId())
	return n
}

func (x *GetESMuserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetESMuserResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBaseResp())
	return n
}

func (x *GetESMuserResp) sizeField2() (n int) {
	if len(x.Muser) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetMuser())
	return n
}

var fieldIDToName_SearchHashtagItemReq = map[int32]string{
	1: "Hashtag",
	2: "Cursor",
	3: "Limit",
	4: "SearchMode",
}

var fieldIDToName_SearchHashtagItemResp = map[int32]string{
	1: "BaseResp",
	2: "ItemIds",
	3: "NextCursor",
	4: "HasMore",
	5: "Total",
}

var fieldIDToName_SearchItemReq = map[int32]string{
	1: "Keyword",
	2: "From",
	3: "Limit",
	4: "SearchMode",
}

var fieldIDToName_SearchItemResp = map[int32]string{
	1: "BaseResp",
	2: "Items",
	3: "Total",
}

var fieldIDToName_IndexItemReq = map[int32]string{
	1: "ItemId",
	2: "Title",
	3: "Description",
	4: "Hashtags",
	5: "CreateTime",
}

var fieldIDToName_IndexItemResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_DelIndexItemReq = map[int32]string{
	1: "ItemId",
}

var fieldIDToName_DelIndexItemResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_SearchItem4UgReq = map[int32]string{
	1: "Keyword",
	2: "From",
	3: "Limit",
	4: "SearchMode",
	5: "SortType",
}

var fieldIDToName_SearchItem4UgResp = map[int32]string{
	1: "BaseResp",
	2: "Items",
	3: "Total",
}

var fieldIDToName_SearchHashtagItem4UgReq = map[int32]string{
	1: "Hashtag",
	2: "From",
	3: "Limit",
}

var fieldIDToName_SearchHashtagItem4UgResp = map[int32]string{
	1: "BaseResp",
	2: "Items",
	3: "Total",
}

var fieldIDToName_IndexItem4UgReq = map[int32]string{
	1: "ItemId",
}

var fieldIDToName_IndexItem4UgResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_DelIndexItem4UgReq = map[int32]string{
	1: "ItemId",
}

var fieldIDToName_DelIndexItem4UgResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_IndexAllItem4UgReq = map[int32]string{}

var fieldIDToName_IndexAllItem4UgResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_SearchCharacterItemReq = map[int32]string{
	1: "Keyword",
	2: "Cursor",
	3: "Limit",
	4: "SearchMode",
}

var fieldIDToName_SearchCharacterItemResp = map[int32]string{
	1: "BaseResp",
	2: "Items",
	3: "NextCursor",
	4: "HasMore",
	5: "Total",
}

var fieldIDToName_SearchCharacterItemHintReq = map[int32]string{
	1: "Keyword",
	2: "Cursor",
	3: "Limit",
	4: "SearchMode",
}

var fieldIDToName_SearchCharacterItemHintResp = map[int32]string{
	1: "BaseResp",
	2: "Hints",
	3: "NextCursor",
	4: "HasMore",
	5: "Total",
}

var fieldIDToName_IndexCharacterItemReq = map[int32]string{
	1: "ItemIds",
}

var fieldIDToName_IndexCharacterItemResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_DeleteCharacterItemReq = map[int32]string{
	1: "ItemId",
}

var fieldIDToName_DeleteCharacterItemResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_ESSyncItemReq = map[int32]string{
	1: "ItemId",
	2: "MuserId",
	3: "MuserName",
	4: "Description",
	5: "Title",
	6: "Bio",
}

var fieldIDToName_ESSyncItemResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_ESBulkSyncItemReq = map[int32]string{
	1: "Items",
}

var fieldIDToName_ESBulkSyncItemResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_ESDeleteItemReq = map[int32]string{
	1: "ItemId",
}

var fieldIDToName_ESDeleteItemResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_ESQueryItemReq = map[int32]string{
	1: "Query",
}

var fieldIDToName_ESQueryItemResp = map[int32]string{
	1: "BaseResp",
	2: "Items",
}

var fieldIDToName_ESMGetItemReq = map[int32]string{
	1: "ItemId",
}

var fieldIDToName_ESMGetItemResp = map[int32]string{
	1: "BaseResp",
	2: "Item",
}

var fieldIDToName_HashtagItem = map[int32]string{
	1: "HashtagId",
	2: "ItemId",
	3: "Hashtag",
	4: "SexualScore",
	5: "CreateTime",
}

var fieldIDToName_BulkCreateHashtagItemReq = map[int32]string{
	1: "Items",
}

var fieldIDToName_BulkCreateHashtagItemResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_UpdateHashtagItemSexualScoreReq = map[int32]string{
	3: "Query",
}

var fieldIDToName_UpdateHashtagItemSexualScoreResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_ESUser = map[int32]string{
	1: "UserID",
	2: "Email",
	3: "NickName",
	4: "DeviceIDs",
	5: "Channels",
	6: "CreatedAt",
}

var fieldIDToName_SyncUserReq = map[int32]string{
	1: "User",
}

var fieldIDToName_SyncUserResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_DeleteUserReq = map[int32]string{
	1: "UserID",
}

var fieldIDToName_DeleteUserResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_SearchUserReq = map[int32]string{
	1: "Query",
}

var fieldIDToName_SearchUserResp = map[int32]string{
	1: "BaseResp",
	2: "Users",
}

var fieldIDToName_ESDocByIdReq = map[int32]string{
	1: "DocID",
}

var fieldIDToName_ESDocByIdResp = map[int32]string{
	1: "BaseResp",
	2: "Doc",
}

var fieldIDToName_ESMuser = map[int32]string{
	1: "MuserID",
	2: "MuserName",
	3: "Description",
}

var fieldIDToName_SyncESMuserReq = map[int32]string{
	1: "Muser",
}

var fieldIDToName_SyncESMuserResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_DeleteMuserReq = map[int32]string{
	1: "MuserId",
}

var fieldIDToName_DeleteMuserResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_SearchESMuserReq = map[int32]string{
	1: "Query",
}

var fieldIDToName_SearchESMuserResp = map[int32]string{
	1: "BaseResp",
	2: "Muser",
}

var fieldIDToName_GetESMuserReq = map[int32]string{
	1: "MuserId",
}

var fieldIDToName_GetESMuserResp = map[int32]string{
	1: "BaseResp",
	2: "Muser",
}

var _ = base.File_base_proto
var _ = biz_model_search.File_model_biz_model_search_proto
var _ = biz_es_model_item.File_es_model_biz_es_model_item_proto
