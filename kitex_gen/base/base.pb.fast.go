// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package base

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseResp[number], err)
}

func (x *BaseResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ErrorCode, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *BaseResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ErrorMessage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TimeRange) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TimeRange[number], err)
}

func (x *TimeRange) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Start, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *TimeRange) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.End, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ScanOption) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ScanOption[number], err)
}

func (x *ScanOption) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Cursor, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ScanOption) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ScanOption) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OrderBy = ScanOrderBy(v)
	return offset, nil
}

func (x *ScanOption) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v TimeRange
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TimeRange = &v
	return offset, nil
}

func (x *ABExperiment) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ABExperiment[number], err)
}

func (x *ABExperiment) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ExperimentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ABExperiment) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.VariationId, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *BaseResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BaseResp) fastWriteField1(buf []byte) (offset int) {
	if x.ErrorCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetErrorCode())
	return offset
}

func (x *BaseResp) fastWriteField2(buf []byte) (offset int) {
	if x.ErrorMessage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetErrorMessage())
	return offset
}

func (x *TimeRange) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *TimeRange) fastWriteField1(buf []byte) (offset int) {
	if x.Start == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStart())
	return offset
}

func (x *TimeRange) fastWriteField2(buf []byte) (offset int) {
	if x.End == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetEnd())
	return offset
}

func (x *ScanOption) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ScanOption) fastWriteField1(buf []byte) (offset int) {
	if x.Cursor == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCursor())
	return offset
}

func (x *ScanOption) fastWriteField2(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetLimit())
	return offset
}

func (x *ScanOption) fastWriteField3(buf []byte) (offset int) {
	if x.OrderBy == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetOrderBy()))
	return offset
}

func (x *ScanOption) fastWriteField4(buf []byte) (offset int) {
	if x.TimeRange == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetTimeRange())
	return offset
}

func (x *ABExperiment) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ABExperiment) fastWriteField1(buf []byte) (offset int) {
	if x.ExperimentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetExperimentId())
	return offset
}

func (x *ABExperiment) fastWriteField2(buf []byte) (offset int) {
	if x.VariationId == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetVariationId())
	return offset
}

func (x *BaseResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BaseResp) sizeField1() (n int) {
	if x.ErrorCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetErrorCode())
	return n
}

func (x *BaseResp) sizeField2() (n int) {
	if x.ErrorMessage == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetErrorMessage())
	return n
}

func (x *TimeRange) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *TimeRange) sizeField1() (n int) {
	if x.Start == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStart())
	return n
}

func (x *TimeRange) sizeField2() (n int) {
	if x.End == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetEnd())
	return n
}

func (x *ScanOption) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ScanOption) sizeField1() (n int) {
	if x.Cursor == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCursor())
	return n
}

func (x *ScanOption) sizeField2() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetLimit())
	return n
}

func (x *ScanOption) sizeField3() (n int) {
	if x.OrderBy == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetOrderBy()))
	return n
}

func (x *ScanOption) sizeField4() (n int) {
	if x.TimeRange == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetTimeRange())
	return n
}

func (x *ABExperiment) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ABExperiment) sizeField1() (n int) {
	if x.ExperimentId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetExperimentId())
	return n
}

func (x *ABExperiment) sizeField2() (n int) {
	if x.VariationId == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetVariationId())
	return n
}

var fieldIDToName_BaseResp = map[int32]string{
	1: "ErrorCode",
	2: "ErrorMessage",
}

var fieldIDToName_TimeRange = map[int32]string{
	1: "Start",
	2: "End",
}

var fieldIDToName_ScanOption = map[int32]string{
	1: "Cursor",
	2: "Limit",
	3: "OrderBy",
	4: "TimeRange",
}

var fieldIDToName_ABExperiment = map[int32]string{
	1: "ExperimentId",
	2: "VariationId",
}
